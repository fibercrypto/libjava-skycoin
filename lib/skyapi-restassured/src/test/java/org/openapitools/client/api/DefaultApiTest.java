/*
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.Address;
import org.openapitools.client.model.BlockSchema;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse20010;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.InlineResponse2009;
import org.openapitools.client.model.InlineResponseDefault;
import org.openapitools.client.model.NetworkConnectionSchema;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionV2ParamsAddress;
import org.openapitools.client.model.TransactionV2ParamsUnspent;
import org.openapitools.client.model.TransactionVerifyRequest;
import org.openapitools.client.model.WalletTransactionRequest;
import org.openapitools.client.model.WalletTransactionSignRequest;
import org.openapitools.client.ApiClient;
import org.openapitools.client.api.DefaultApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static org.openapitools.client.GsonObjectMapper.gson;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private DefaultApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://127.0.0.1:6420")))._default();
    }

    /**
     * addressCount response object
     */
    @Test
    public void shouldSee200AfterAddressCount() {
        api.addressCount().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterAddressCount() {
        api.addressCount().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Return address uxouts
     */
    @Test
    public void shouldSee200AfterAddressUxouts() {
        String address = null;
        api.addressUxouts()
                .addressQuery(address).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterAddressUxouts() {
        String address = null;
        api.addressUxouts()
                .addressQuery(address).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Response is araw transaction by id
     */
    @Test
    public void shouldSee200AfterApiV1RawtxGet() {
        api.apiV1RawtxGet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Metrics
     */
    @Test
    public void shouldSee200AfterApiV2MetricsGet() {
        api.apiV2MetricsGet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns the balance of one or more addresses
     */
    @Test
    public void shouldSee200AfterBalanceGet() {
        String addrs = null;
        api.balanceGet()
                .addrsQuery(addrs).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterBalanceGet() {
        String addrs = null;
        api.balanceGet()
                .addrsQuery(addrs).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns the balance of one or more addresses
     */
    @Test
    public void shouldSee200AfterBalancePost() {
        String addrs = null;
        api.balancePost()
                .addrsQuery(addrs).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterBalancePost() {
        String addrs = null;
        api.balancePost()
                .addrsQuery(addrs).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Return block Array
     */
    @Test
    public void shouldSee200AfterBlock() {
        String hash = null;
        Integer seq = null;
        api.block().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterBlock() {
        String hash = null;
        Integer seq = null;
        api.block().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns the blockchain metadata.
     */
    @Test
    public void shouldSee200AfterBlockchainMetadata() {
        api.blockchainMetadata().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterBlockchainMetadata() {
        api.blockchainMetadata().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns the blockchain sync progress
     */
    @Test
    public void shouldSee200AfterBlockchainProgress() {
        api.blockchainProgress().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterBlockchainProgress() {
        api.blockchainProgress().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Get blocks in specific range
     */
    @Test
    public void shouldSee200AfterBlocks() {
        Integer start = null;
        Integer end = null;
        List<Integer> seq = null;
        api.blocks().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterBlocks() {
        Integer start = null;
        Integer end = null;
        List<Integer> seq = null;
        api.blocks().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * CoinSupply records the coin supply info.
     */
    @Test
    public void shouldSee200AfterCoinSupply() {
        api.coinSupply().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterCoinSupply() {
        api.coinSupply().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Return a csrf Token.
     */
    @Test
    public void shouldSee200AfterCsrf() {
        api.csrf().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterCsrf() {
        api.csrf().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns empty json
     */
    @Test
    public void shouldSee200AfterDataDELETE() {
        String type = null;
        String key = null;
        api.dataDELETE().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterDataDELETE() {
        String type = null;
        String key = null;
        api.dataDELETE().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Return multiKey
     */
    @Test
    public void shouldSee200AfterDataGET() {
        String type = null;
        String key = null;
        api.dataGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterDataGET() {
        String type = null;
        String key = null;
        api.dataGET().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns empty json
     */
    @Test
    public void shouldSee200AfterDataPOST() {
        String type = null;
        String key = null;
        String val = null;
        api.dataPOST().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterDataPOST() {
        String type = null;
        String key = null;
        String val = null;
        api.dataPOST().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return an list of default connections.
     */
    @Test
    public void shouldSee200AfterDefaultConnections() {
        api.defaultConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterDefaultConnections() {
        api.defaultConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns node health data.
     */
    @Test
    public void shouldSee200AfterHealth() {
        api.health().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterHealth() {
        api.health().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns the most recent N blocks on the blockchain
     */
    @Test
    public void shouldSee200AfterLastBlocks() {
        Integer num = null;
        api.lastBlocks()
                .numQuery(num).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterLastBlocks() {
        Integer num = null;
        api.lastBlocks()
                .numQuery(num).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return a connection struct
     */
    @Test
    public void shouldSee200AfterNetworkConnection() {
        String addr = null;
        api.networkConnection()
                .addrQuery(addr).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterNetworkConnection() {
        String addr = null;
        api.networkConnection()
                .addrQuery(addr).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return networks connections
     */
    @Test
    public void shouldSee200AfterNetworkConnections() {
        String states = null;
        String direction = null;
        api.networkConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterNetworkConnections() {
        String states = null;
        String direction = null;
        api.networkConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint
     */
    @Test
    public void shouldSee200AfterNetworkConnectionsDisconnect() {
        String id = null;
        api.networkConnectionsDisconnect()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterNetworkConnectionsDisconnect() {
        String id = null;
        api.networkConnectionsDisconnect()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return a list of all connections found through peer exchange.
     */
    @Test
    public void shouldSee200AfterNetworkConnectionsExchange() {
        api.networkConnectionsExchange().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterNetworkConnectionsExchange() {
        api.networkConnectionsExchange().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return a list of trusted connections.
     */
    @Test
    public void shouldSee200AfterNetworkConnectionsTrust() {
        api.networkConnectionsTrust().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterNetworkConnectionsTrust() {
        api.networkConnectionsTrust().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * UnspentOutputsSummary records unspent outputs in different status.
     */
    @Test
    public void shouldSee200AfterOutputsGet() {
        List<String> address = null;
        List<String> hash = null;
        api.outputsGet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterOutputsGet() {
        List<String> address = null;
        List<String> hash = null;
        api.outputsGet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * UnspentOutputsSummary records unspent outputs in different status.
     */
    @Test
    public void shouldSee200AfterOutputsPost() {
        String address = null;
        String hash = null;
        api.outputsPost().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterOutputsPost() {
        String address = null;
        String hash = null;
        api.outputsPost().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Transaction inputs include the owner address, coins, hours and calculated hours.
     */
    @Test
    public void shouldSee200AfterPendingTxs() {
        api.pendingTxs().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterPendingTxs() {
        api.pendingTxs().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * OK, Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     */
    @Test
    public void shouldSee200AfterResendUnconfirmedTxns() {
        api.resendUnconfirmedTxns().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterResendUnconfirmedTxns() {
        api.resendUnconfirmedTxns().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Represent richlist response
     */
    @Test
    public void shouldSee200AfterRichlist() {
        Boolean includeDistribution = null;
        String n = null;
        api.richlist().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterRichlist() {
        Boolean includeDistribution = null;
        String n = null;
        api.richlist().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns a transaction identified by its txid hash.
     */
    @Test
    public void shouldSee200AfterTransaction() {
        String txid = null;
        api.transaction()
                .txidQuery(txid).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransaction() {
        String txid = null;
        api.transaction()
                .txidQuery(txid).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Broadcasts a hex-encoded, serialized transaction to the network
     */
    @Test
    public void shouldSee200AfterTransactionInject() {
        String rawtx = null;
        String noBroadcast = null;
        api.transactionInject()
                .rawtxHeader(rawtx).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionInject() {
        String rawtx = null;
        String noBroadcast = null;
        api.transactionInject()
                .rawtxHeader(rawtx).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Response is a transaction
     */
    @Test
    public void shouldSee200AfterTransactionPost() {
        TransactionV2ParamsAddress transactionV2ParamsAddress = null;
        api.transactionPost().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionPost() {
        TransactionV2ParamsAddress transactionV2ParamsAddress = null;
        api.transactionPost().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Response is a transaction
     */
    @Test
    public void shouldSee200AfterTransactionPostUnspent() {
        TransactionV2ParamsUnspent transactionV2ParamsUnspent = null;
        api.transactionPostUnspent()
                .body(transactionV2ParamsUnspent).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionPostUnspent() {
        TransactionV2ParamsUnspent transactionV2ParamsUnspent = null;
        api.transactionPostUnspent()
                .body(transactionV2ParamsUnspent).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns the hex-encoded byte serialization of a transaction
     */
    @Test
    public void shouldSee200AfterTransactionRaw() {
        String txid = null;
        api.transactionRaw().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionRaw() {
        String txid = null;
        api.transactionRaw().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Responses ok
     */
    @Test
    public void shouldSee200AfterTransactionVerify() {
        TransactionVerifyRequest transactionVerifyRequest = null;
        api.transactionVerify()
                .body(transactionVerifyRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionVerify() {
        TransactionVerifyRequest transactionVerifyRequest = null;
        api.transactionVerify()
                .body(transactionVerifyRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns transactions that match the filters.
     */
    @Test
    public void shouldSee200AfterTransactionsGet() {
        String addrs = null;
        String confirmed = null;
        api.transactionsGet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionsGet() {
        String addrs = null;
        String confirmed = null;
        api.transactionsGet().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns transactions that match the filters.
     */
    @Test
    public void shouldSee200AfterTransactionsPost() {
        String addrs = null;
        String confirmed = null;
        api.transactionsPost().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterTransactionsPost() {
        String addrs = null;
        String confirmed = null;
        api.transactionsPost().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Response for endpoint /api/v1/uxout
     */
    @Test
    public void shouldSee200AfterUxout() {
        String uxid = null;
        api.uxout().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterUxout() {
        String uxid = null;
        api.uxout().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * 
     */
    @Test
    public void shouldSee200AfterVerifyAddress() {
        Address address = null;
        api.verifyAddress()
                .addressQuery(address).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterVerifyAddress() {
        Address address = null;
        api.verifyAddress()
                .addressQuery(address).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * BuildInfo represents the build info
     */
    @Test
    public void shouldSee200AfterVersion() {
        api.version().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterVersion() {
        api.version().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Response for endpoint /api/v1/wallet
     */
    @Test
    public void shouldSee200AfterWallet() {
        String id = null;
        api.wallet()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWallet() {
        String id = null;
        api.wallet()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns the wallets balance
     */
    @Test
    public void shouldSee200AfterWalletBalance() {
        String id = null;
        api.walletBalance()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletBalance() {
        String id = null;
        api.walletBalance()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Response for endpoint /api/v1/wallet
     */
    @Test
    public void shouldSee200AfterWalletCreate() {
        String type = null;
        String seed = null;
        String label = null;
        String seedPassphrase = null;
        String bip44Coin = null;
        String xpub = null;
        String scan = null;
        String encrypt = null;
        String password = null;
        api.walletCreate()
                .typeHeader(type)
                .seedHeader(seed)
                .labelHeader(label).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletCreate() {
        String type = null;
        String seed = null;
        String label = null;
        String seedPassphrase = null;
        String bip44Coin = null;
        String xpub = null;
        String scan = null;
        String encrypt = null;
        String password = null;
        api.walletCreate()
                .typeHeader(type)
                .seedHeader(seed)
                .labelHeader(label).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint decrypts wallets.
     */
    @Test
    public void shouldSee200AfterWalletDecrypt() {
        String id = null;
        String password = null;
        api.walletDecrypt()
                .idHeader(id)
                .passwordHeader(password).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletDecrypt() {
        String id = null;
        String password = null;
        api.walletDecrypt()
                .idHeader(id)
                .passwordHeader(password).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint encrypt wallets.
     */
    @Test
    public void shouldSee200AfterWalletEncrypt() {
        String id = null;
        String password = null;
        api.walletEncrypt()
                .idHeader(id)
                .passwordHeader(password).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletEncrypt() {
        String id = null;
        String password = null;
        api.walletEncrypt()
                .idHeader(id)
                .passwordHeader(password).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return the wallet directory path
     */
    @Test
    public void shouldSee200AfterWalletFolder() {
        String addr = null;
        api.walletFolder()
                .addrQuery(addr).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletFolder() {
        String addr = null;
        api.walletFolder()
                .addrQuery(addr).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint generate new addresses
     */
    @Test
    public void shouldSee200AfterWalletNewAddress() {
        String id = null;
        String num = null;
        String password = null;
        api.walletNewAddress()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletNewAddress() {
        String id = null;
        String num = null;
        String password = null;
        api.walletNewAddress()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Generates wallet seed
     */
    @Test
    public void shouldSee200AfterWalletNewSeed() {
        String entropy = null;
        api.walletNewSeed().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletNewSeed() {
        String entropy = null;
        api.walletNewSeed().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint recover wallets.
     */
    @Test
    public void shouldSee200AfterWalletRecover() {
        String id = null;
        String seed = null;
        String seedPassphrase = null;
        String password = null;
        api.walletRecover()
                .idHeader(id)
                .seedHeader(seed).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletRecover() {
        String id = null;
        String seed = null;
        String seedPassphrase = null;
        String password = null;
        api.walletRecover()
                .idHeader(id)
                .seedHeader(seed).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint Returns seed of wallet of given id
     */
    @Test
    public void shouldSee200AfterWalletSeed() {
        String id = null;
        String password = null;
        api.walletSeed()
                .idQuery(id)
                .passwordQuery(password).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletSeed() {
        String id = null;
        String password = null;
        api.walletSeed()
                .idQuery(id)
                .passwordQuery(password).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Verifies a wallet seed.
     */
    @Test
    public void shouldSee200AfterWalletSeedVerify() {
        String seed = null;
        api.walletSeedVerify().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee422AfterWalletSeedVerify() {
        String seed = null;
        api.walletSeedVerify().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletSeedVerify() {
        String seed = null;
        api.walletSeedVerify().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Returns blocks between a start and end point.
     */
    @Test
    public void shouldSee200AfterWalletTransaction() {
        WalletTransactionRequest walletTransactionRequest = null;
        api.walletTransaction()
                .body(walletTransactionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletTransaction() {
        WalletTransactionRequest walletTransactionRequest = null;
        api.walletTransaction()
                .body(walletTransactionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Signs an unsigned transaction, returning the transaction with updated signatures and the encoded, serialized transaction.
     */
    @Test
    public void shouldSee200AfterWalletTransactionSign() {
        WalletTransactionSignRequest walletTransactionSignRequest = null;
        api.walletTransactionSign()
                .body(walletTransactionSignRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletTransactionSign() {
        WalletTransactionSignRequest walletTransactionSignRequest = null;
        api.walletTransactionSign()
                .body(walletTransactionSignRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns all unconfirmed transactions for all addresses in a given wallet.
     */
    @Test
    public void shouldSee200AfterWalletTransactions() {
        String id = null;
        api.walletTransactions()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletTransactions() {
        String id = null;
        api.walletTransactions()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint returns nothing.
     */
    @Test
    public void shouldSee200AfterWalletUnload() {
        String id = null;
        api.walletUnload()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletUnload() {
        String id = null;
        api.walletUnload()
                .idQuery(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint Returns the label the wallet will be updated to .
     */
    @Test
    public void shouldSee200AfterWalletUpdate() {
        String id = null;
        String label = null;
        api.walletUpdate()
                .idHeader(id)
                .labelHeader(label).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWalletUpdate() {
        String id = null;
        String label = null;
        api.walletUpdate()
                .idHeader(id)
                .labelHeader(label).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * This endpoint return all loaded wallets
     */
    @Test
    public void shouldSee200AfterWallets() {
        api.wallets().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures.
     */
    @Test
    public void shouldSee0AfterWallets() {
        api.wallets().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}