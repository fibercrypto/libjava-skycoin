/*
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.26.0
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BlockSchema;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse20010;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.InlineResponse2009;
import org.openapitools.client.model.InlineResponseDefault;
import org.openapitools.client.model.NetworkConnectionSchema;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionV2ParamsAddress;
import org.openapitools.client.model.TransactionV2ParamsUnspent;
import org.openapitools.client.model.TransactionVerifyRequest;
import org.openapitools.client.model.WalletTransactionRequest;
import org.openapitools.client.model.WalletTransactionSignRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.openapitools.client.model.Address;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Returns the total number of unique address that have coins.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressCountTest() throws ApiException {
        InlineResponse200 response = api.addressCount();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the historical, spent outputs associated with an address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressUxoutsTest() throws ApiException {
        String address = null;
        List<Object> response = api.addressUxouts(address);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RawtxGetTest() throws ApiException {
        String response = api.apiV1RawtxGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2MetricsGetTest() throws ApiException {
        String response = api.apiV2MetricsGet();

        // TODO: test validations
    }
    
    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void balanceGetTest() throws ApiException {
        String addrs = null;
        Object response = api.balanceGet(addrs);

        // TODO: test validations
    }
    
    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void balancePostTest() throws ApiException {
        String addrs = null;
        Object response = api.balancePost(addrs);

        // TODO: test validations
    }
    
    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockTest() throws ApiException {
        String hash = null;
        Integer seq = null;
        List<BlockSchema> response = api.block(hash, seq);

        // TODO: test validations
    }
    
    /**
     * Returns the blockchain metadata.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockchainMetadataTest() throws ApiException {
        Object response = api.blockchainMetadata();

        // TODO: test validations
    }
    
    /**
     * Returns the blockchain sync progress.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockchainProgressTest() throws ApiException {
        Object response = api.blockchainProgress();

        // TODO: test validations
    }
    
    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blocksTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        List<Integer> seq = null;
        InlineResponse2001 response = api.blocks(start, end, seq);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * coinSupplyHandler returns coin distribution supply stats
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void coinSupplyTest() throws ApiException {
        InlineResponse2002 response = api.coinSupply();

        // TODO: test validations
    }
    
    /**
     * Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void csrfTest() throws ApiException {
        InlineResponse2003 response = api.csrf();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataDELETETest() throws ApiException {
        String type = null;
        String key = null;
        api.dataDELETE(type, key);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataGETTest() throws ApiException {
        String type = null;
        String key = null;
        Object response = api.dataGET(type, key);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataPOSTTest() throws ApiException {
        String type = null;
        String key = null;
        String val = null;
        api.dataPOST(type, key, val);

        // TODO: test validations
    }
    
    /**
     * defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void defaultConnectionsTest() throws ApiException {
        List<String> response = api.defaultConnections();

        // TODO: test validations
    }
    
    /**
     * Returns node health data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthTest() throws ApiException {
        Object response = api.health();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the most recent N blocks on the blockchain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lastBlocksTest() throws ApiException {
        Integer num = null;
        Object response = api.lastBlocks(num);

        // TODO: test validations
    }
    
    /**
     * This endpoint returns a specific connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void networkConnectionTest() throws ApiException {
        String addr = null;
        NetworkConnectionSchema response = api.networkConnection(addr);

        // TODO: test validations
    }
    
    /**
     * This endpoint returns all outgoings connections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void networkConnectionsTest() throws ApiException {
        String states = null;
        String direction = null;
        InlineResponse2004 response = api.networkConnections(states, direction);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This endpoint disconnects a connection by ID or address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void networkConnectionsDisconnectTest() throws ApiException {
        String id = null;
        api.networkConnectionsDisconnect(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This endpoint returns all connections found through peer exchange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void networkConnectionsExchangeTest() throws ApiException {
        List<String> response = api.networkConnectionsExchange();

        // TODO: test validations
    }
    
    /**
     * trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void networkConnectionsTrustTest() throws ApiException {
        List<String> response = api.networkConnectionsTrust();

        // TODO: test validations
    }
    
    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outputsGetTest() throws ApiException {
        List<String> address = null;
        List<String> hash = null;
        Object response = api.outputsGet(address, hash);

        // TODO: test validations
    }
    
    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outputsPostTest() throws ApiException {
        String address = null;
        String hash = null;
        Object response = api.outputsPost(address, hash);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pendingTxsTest() throws ApiException {
        List<InlineResponse20010> response = api.pendingTxs();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendUnconfirmedTxnsTest() throws ApiException {
        Object response = api.resendUnconfirmedTxns();

        // TODO: test validations
    }
    
    /**
     * Returns the top skycoin holders.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void richlistTest() throws ApiException {
        Boolean includeDistribution = null;
        String n = null;
        Object response = api.richlist(includeDistribution, n);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a transaction identified by its txid hash with just id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionTest() throws ApiException {
        String txid = null;
        Transaction response = api.transaction(txid);

        // TODO: test validations
    }
    
    /**
     * Broadcast a hex-encoded, serialized transaction to the network.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionInjectTest() throws ApiException {
        String rawtx = null;
        Boolean noBroadcast = true;
        String response = api.transactionInject(rawtx, noBroadcast);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionPostTest() throws ApiException {
        TransactionV2ParamsAddress transactionV2ParamsAddress = null;
        InlineResponse2008 response = api.transactionPost(transactionV2ParamsAddress);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionPostUnspentTest() throws ApiException {
        TransactionV2ParamsUnspent transactionV2ParamsUnspent = null;
        InlineResponse2008 response = api.transactionPostUnspent(transactionV2ParamsUnspent);

        // TODO: test validations
    }
    
    /**
     * Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionRawTest() throws ApiException {
        String txid = null;
        Object response = api.transactionRaw(txid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Decode and verify an encoded transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionVerifyTest() throws ApiException {
        TransactionVerifyRequest transactionVerifyRequest = null;
        Object response = api.transactionVerify(transactionVerifyRequest);

        // TODO: test validations
    }
    
    /**
     * Returns transactions that match the filters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsGetTest() throws ApiException {
        String addrs = null;
        String confirmed = null;
        Object response = api.transactionsGet(addrs, confirmed);

        // TODO: test validations
    }
    
    /**
     * Returns transactions that match the filters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsPostTest() throws ApiException {
        String addrs = null;
        String confirmed = null;
        Object response = api.transactionsPost(addrs, confirmed);

        // TODO: test validations
    }
    
    /**
     * Returns an unspent output by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uxoutTest() throws ApiException {
        String uxid = null;
        Object response = api.uxout(uxid);

        // TODO: test validations
    }
    
    /**
     * Verifies a Skycoin address.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyAddressTest() throws ApiException {
        Address address = null;
        Object response = api.verifyAddress(address);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * versionHandler returns the application version info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionTest() throws ApiException {
        InlineResponse2005 response = api.version();

        // TODO: test validations
    }
    
    /**
     * Returns a wallet by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTest() throws ApiException {
        String id = null;
        Object response = api.wallet(id);

        // TODO: test validations
    }
    
    /**
     * Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletBalanceTest() throws ApiException {
        String id = null;
        Object response = api.walletBalance(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletCreateTest() throws ApiException {
        String seed = null;
        String label = null;
        Integer scan = null;
        Boolean encrypt = null;
        String password = null;
        String type = null;
        String seedPassphrase = null;
        String bip44Coin = null;
        String xpub = null;
        Object response = api.walletCreate(type ,seed, label,seedPassphrase, bip44Coin, xpub, scan, encrypt, password);
        // TODO: test validations
    }
    
    /**
     * Decrypts wallet.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletDecryptTest() throws ApiException {
        String id = null;
        String password = null;
        Object response = api.walletDecrypt(id, password);

        // TODO: test validations
    }
    
    /**
     * Encrypt wallet.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletEncryptTest() throws ApiException {
        String id = null;
        String password = null;
        Object response = api.walletEncrypt(id, password);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the wallet directory path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletFolderTest() throws ApiException {
        String addr = null;
        InlineResponse2007 response = api.walletFolder(addr);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Generates new addresses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletNewAddressTest() throws ApiException {
        String id = null;
        String num = null;
        String password = null;
        Object response = api.walletNewAddress(id, num, password);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the wallet directory path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletNewSeedTest() throws ApiException {
        String entropy = null;
        Object response = api.walletNewSeed(entropy);

        // TODO: test validations
    }
    
    /**
     * Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletRecoverTest() throws ApiException {
        String id = null;
        String seed = null;
        String password = null;
        String seedPassphrase = null;
        Object response = api.walletRecover(id, seed, seedPassphrase, password);

        // TODO: test validations
    }
    
    /**
     * This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSeedTest() throws ApiException {
        String id = null;
        String password = null;
        Object response = api.walletSeed(id, password);

        // TODO: test validations
    }
    
    /**
     * Verifies a wallet seed.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSeedVerifyTest() throws ApiException {
        String seed = null;
        Object response = api.walletSeedVerify(seed);

        // TODO: test validations
    }
    
    /**
     * Creates a signed transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionTest() throws ApiException {
        WalletTransactionRequest walletTransactionRequest = null;
        Object response = api.walletTransaction(walletTransactionRequest);

        // TODO: test validations
    }
    
    /**
     * Creates a signed transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionSignTest() throws ApiException {
        WalletTransactionSignRequest walletTransactionSignRequest = null;
        InlineResponse2009 response = api.walletTransactionSign(walletTransactionSignRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionsTest() throws ApiException {
        String id = null;
        InlineResponse2006 response = api.walletTransactions(id);

        // TODO: test validations
    }
    
    /**
     * Unloads wallet from the wallet service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletUnloadTest() throws ApiException {
        String id = null;
        api.walletUnload(id);

        // TODO: test validations
    }
    
    /**
     * Update the wallet.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletUpdateTest() throws ApiException {
        String id = null;
        String label = null;
        String response = api.walletUpdate(id, label);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all loaded wallets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletsTest() throws ApiException {
        List<Object> response = api.wallets();

        // TODO: test validations
    }
    
}
