/*
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Address;
import org.openapitools.client.model.BlockSchema;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse20010;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.InlineResponse2009;
import org.openapitools.client.model.InlineResponseDefault;
import org.openapitools.client.model.NetworkConnectionSchema;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionV2ParamsAddress;
import org.openapitools.client.model.TransactionV2ParamsUnspent;
import org.openapitools.client.model.TransactionVerifyRequest;
import org.openapitools.client.model.WalletTransactionRequest;
import org.openapitools.client.model.WalletTransactionSignRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addressCount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addressCount response object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressCountCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/addresscount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addressCountCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the total number of unique address that have coins.
     * 
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addressCount response object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 addressCount() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = addressCountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the total number of unique address that have coins.
     * 
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addressCount response object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> addressCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addressCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the total number of unique address that have coins. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addressCount response object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressCountAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addressUxouts
     * @param address address to filter by (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return address uxouts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressUxoutsCall(String address, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/address_uxouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressUxoutsValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling addressUxouts(Async)");
        }
        

        okhttp3.Call localVarCall = addressUxoutsCall(address, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the historical, spent outputs associated with an address
     * @param address address to filter by (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return address uxouts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> addressUxouts(String address) throws ApiException {
        ApiResponse<List<Object>> localVarResp = addressUxoutsWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the historical, spent outputs associated with an address
     * @param address address to filter by (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return address uxouts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> addressUxoutsWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = addressUxoutsValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the historical, spent outputs associated with an address
     * @param address address to filter by (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return address uxouts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressUxoutsAsync(String address, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressUxoutsValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1RawtxGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is araw transaction by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RawtxGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/rawtx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RawtxGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV1RawtxGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is araw transaction by id </td><td>  -  </td></tr>
     </table>
     */
    public String apiV1RawtxGet() throws ApiException {
        ApiResponse<String> localVarResp = apiV1RawtxGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is araw transaction by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> apiV1RawtxGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1RawtxGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is araw transaction by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RawtxGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RawtxGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2MetricsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metrics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2MetricsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2MetricsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2MetricsGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metrics </td><td>  -  </td></tr>
     </table>
     */
    public String apiV2MetricsGet() throws ApiException {
        ApiResponse<String> localVarResp = apiV2MetricsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metrics </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> apiV2MetricsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV2MetricsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metrics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2MetricsGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2MetricsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for balanceGet
     * @param addrs command separated list of addresses (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceGetCall(String addrs, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addrs", addrs));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balanceGetValidateBeforeCall(String addrs, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addrs' is set
        if (addrs == null) {
            throw new ApiException("Missing the required parameter 'addrs' when calling balanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = balanceGetCall(addrs, _callback);
        return localVarCall;

    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param addrs command separated list of addresses (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object balanceGet(String addrs) throws ApiException {
        ApiResponse<Object> localVarResp = balanceGetWithHttpInfo(addrs);
        return localVarResp.getData();
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param addrs command separated list of addresses (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> balanceGetWithHttpInfo(String addrs) throws ApiException {
        okhttp3.Call localVarCall = balanceGetValidateBeforeCall(addrs, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. (asynchronously)
     * 
     * @param addrs command separated list of addresses (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceGetAsync(String addrs, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = balanceGetValidateBeforeCall(addrs, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for balancePost
     * @param addrs command separated list of addresses (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balancePostCall(String addrs, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addrs", addrs));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balancePostValidateBeforeCall(String addrs, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addrs' is set
        if (addrs == null) {
            throw new ApiException("Missing the required parameter 'addrs' when calling balancePost(Async)");
        }
        

        okhttp3.Call localVarCall = balancePostCall(addrs, _callback);
        return localVarCall;

    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param addrs command separated list of addresses (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object balancePost(String addrs) throws ApiException {
        ApiResponse<Object> localVarResp = balancePostWithHttpInfo(addrs);
        return localVarResp.getData();
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param addrs command separated list of addresses (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> balancePostWithHttpInfo(String addrs) throws ApiException {
        okhttp3.Call localVarCall = balancePostValidateBeforeCall(addrs, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. (asynchronously)
     * 
     * @param addrs command separated list of addresses (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the balance of one or more addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balancePostAsync(String addrs, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = balancePostValidateBeforeCall(addrs, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for block
     * @param hash get block by hash (optional)
     * @param seq get block by sequence number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return block Array </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCall(String hash, Integer seq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/block";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (seq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seq", seq));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockValidateBeforeCall(String hash, Integer seq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockCall(hash, seq, _callback);
        return localVarCall;

    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param hash get block by hash (optional)
     * @param seq get block by sequence number (optional)
     * @return List&lt;BlockSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return block Array </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<BlockSchema> block(String hash, Integer seq) throws ApiException {
        ApiResponse<List<BlockSchema>> localVarResp = blockWithHttpInfo(hash, seq);
        return localVarResp.getData();
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param hash get block by hash (optional)
     * @param seq get block by sequence number (optional)
     * @return ApiResponse&lt;List&lt;BlockSchema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return block Array </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BlockSchema>> blockWithHttpInfo(String hash, Integer seq) throws ApiException {
        okhttp3.Call localVarCall = blockValidateBeforeCall(hash, seq, null);
        Type localVarReturnType = new TypeToken<List<BlockSchema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. (asynchronously)
     * 
     * @param hash get block by hash (optional)
     * @param seq get block by sequence number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return block Array </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockAsync(String hash, Integer seq, final ApiCallback<List<BlockSchema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockValidateBeforeCall(hash, seq, _callback);
        Type localVarReturnType = new TypeToken<List<BlockSchema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockchainMetadata
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain metadata. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockchainMetadataCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/blockchain/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockchainMetadataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockchainMetadataCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the blockchain metadata.
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain metadata. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object blockchainMetadata() throws ApiException {
        ApiResponse<Object> localVarResp = blockchainMetadataWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the blockchain metadata.
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain metadata. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockchainMetadataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = blockchainMetadataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the blockchain metadata. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain metadata. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockchainMetadataAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockchainMetadataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockchainProgress
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain sync progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockchainProgressCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/blockchain/progress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockchainProgressValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockchainProgressCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the blockchain sync progress.
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain sync progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object blockchainProgress() throws ApiException {
        ApiResponse<Object> localVarResp = blockchainProgressWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the blockchain sync progress.
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain sync progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockchainProgressWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = blockchainProgressValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the blockchain sync progress. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns the blockchain sync progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockchainProgressAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockchainProgressValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocks
     * @param start start seq (optional)
     * @param end end seq (optional)
     * @param seq comma-separated list of block seqs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get blocks in specific range </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksCall(Integer start, Integer end, List<Integer> seq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (seq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "seq", seq));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksValidateBeforeCall(Integer start, Integer end, List<Integer> seq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blocksCall(start, end, seq, _callback);
        return localVarCall;

    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param start start seq (optional)
     * @param end end seq (optional)
     * @param seq comma-separated list of block seqs (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get blocks in specific range </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 blocks(Integer start, Integer end, List<Integer> seq) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = blocksWithHttpInfo(start, end, seq);
        return localVarResp.getData();
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param start start seq (optional)
     * @param end end seq (optional)
     * @param seq comma-separated list of block seqs (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get blocks in specific range </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> blocksWithHttpInfo(Integer start, Integer end, List<Integer> seq) throws ApiException {
        okhttp3.Call localVarCall = blocksValidateBeforeCall(start, end, seq, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. (asynchronously)
     * 
     * @param start start seq (optional)
     * @param end end seq (optional)
     * @param seq comma-separated list of block seqs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get blocks in specific range </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksAsync(Integer start, Integer end, List<Integer> seq, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksValidateBeforeCall(start, end, seq, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coinSupply
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CoinSupply records the coin supply info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coinSupplyCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/coinSupply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coinSupplyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = coinSupplyCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * coinSupplyHandler returns coin distribution supply stats
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CoinSupply records the coin supply info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 coinSupply() throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = coinSupplyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * coinSupplyHandler returns coin distribution supply stats
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CoinSupply records the coin supply info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> coinSupplyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coinSupplyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coinSupplyHandler returns coin distribution supply stats
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CoinSupply records the coin supply info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coinSupplyAsync(final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = coinSupplyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for csrf
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a csrf Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call csrfCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/csrf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call csrfValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = csrfCall(_callback);
        return localVarCall;

    }

    /**
     * Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * 
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a csrf Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 csrf() throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = csrfWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * 
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a csrf Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> csrfWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = csrfValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a csrf Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call csrfAsync(final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = csrfValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataDELETE
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDELETECall(String type, String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (type != null) {
            localVarHeaderParams.put("type", localVarApiClient.parameterToString(type));
        }

        if (key != null) {
            localVarHeaderParams.put("key", localVarApiClient.parameterToString(key));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataDELETEValidateBeforeCall(String type, String key, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataDELETECall(type, key, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public void dataDELETE(String type, String key) throws ApiException {
        dataDELETEWithHttpInfo(type, key);
    }

    /**
     * 
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataDELETEWithHttpInfo(String type, String key) throws ApiException {
        okhttp3.Call localVarCall = dataDELETEValidateBeforeCall(type, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataDELETEAsync(String type, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataDELETEValidateBeforeCall(type, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataGET
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return multiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataGETCall(String type, String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (type != null) {
            localVarHeaderParams.put("type", localVarApiClient.parameterToString(type));
        }

        if (key != null) {
            localVarHeaderParams.put("key", localVarApiClient.parameterToString(key));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataGETValidateBeforeCall(String type, String key, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataGETCall(type, key, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return multiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object dataGET(String type, String key) throws ApiException {
        ApiResponse<Object> localVarResp = dataGETWithHttpInfo(type, key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return multiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> dataGETWithHttpInfo(String type, String key) throws ApiException {
        okhttp3.Call localVarCall = dataGETValidateBeforeCall(type, key, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return multiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataGETAsync(String type, String key, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataGETValidateBeforeCall(type, key, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPOST
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param val additional value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPOSTCall(String type, String key, String val, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (type != null) {
            localVarHeaderParams.put("type", localVarApiClient.parameterToString(type));
        }

        if (key != null) {
            localVarHeaderParams.put("key", localVarApiClient.parameterToString(key));
        }

        if (val != null) {
            localVarHeaderParams.put("val", localVarApiClient.parameterToString(val));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPOSTValidateBeforeCall(String type, String key, String val, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataPOSTCall(type, key, val, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param val additional value. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public void dataPOST(String type, String key, String val) throws ApiException {
        dataPOSTWithHttpInfo(type, key, val);
    }

    /**
     * 
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param val additional value. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataPOSTWithHttpInfo(String type, String key, String val) throws ApiException {
        okhttp3.Call localVarCall = dataPOSTValidateBeforeCall(type, key, val, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param type storage type. (optional)
     * @param key key of the specific value to get. (optional)
     * @param val additional value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns empty json </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPOSTAsync(String type, String key, String val, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPOSTValidateBeforeCall(type, key, val, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for defaultConnections
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return an list of default connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call defaultConnectionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/network/defaultConnections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call defaultConnectionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = defaultConnectionsCall(_callback);
        return localVarCall;

    }

    /**
     * defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return an list of default connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> defaultConnections() throws ApiException {
        ApiResponse<List<String>> localVarResp = defaultConnectionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return an list of default connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> defaultConnectionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = defaultConnectionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return an list of default connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call defaultConnectionsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = defaultConnectionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for health
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns node health data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = healthCall(_callback);
        return localVarCall;

    }

    /**
     * Returns node health data.
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns node health data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object health() throws ApiException {
        ApiResponse<Object> localVarResp = healthWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns node health data.
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns node health data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> healthWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns node health data. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns node health data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lastBlocks
     * @param num Num of blockss (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the most recent N blocks on the blockchain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lastBlocksCall(Integer num, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/last_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lastBlocksValidateBeforeCall(Integer num, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'num' is set
        if (num == null) {
            throw new ApiException("Missing the required parameter 'num' when calling lastBlocks(Async)");
        }
        

        okhttp3.Call localVarCall = lastBlocksCall(num, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the most recent N blocks on the blockchain
     * @param num Num of blockss (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the most recent N blocks on the blockchain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object lastBlocks(Integer num) throws ApiException {
        ApiResponse<Object> localVarResp = lastBlocksWithHttpInfo(num);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the most recent N blocks on the blockchain
     * @param num Num of blockss (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the most recent N blocks on the blockchain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> lastBlocksWithHttpInfo(Integer num) throws ApiException {
        okhttp3.Call localVarCall = lastBlocksValidateBeforeCall(num, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the most recent N blocks on the blockchain
     * @param num Num of blockss (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the most recent N blocks on the blockchain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lastBlocksAsync(Integer num, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = lastBlocksValidateBeforeCall(num, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkConnection
     * @param addr Address port (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a connection struct </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionCall(String addr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/network/connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addr", addr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkConnectionValidateBeforeCall(String addr, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addr' is set
        if (addr == null) {
            throw new ApiException("Missing the required parameter 'addr' when calling networkConnection(Async)");
        }
        

        okhttp3.Call localVarCall = networkConnectionCall(addr, _callback);
        return localVarCall;

    }

    /**
     * This endpoint returns a specific connection.
     * 
     * @param addr Address port (required)
     * @return NetworkConnectionSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a connection struct </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkConnectionSchema networkConnection(String addr) throws ApiException {
        ApiResponse<NetworkConnectionSchema> localVarResp = networkConnectionWithHttpInfo(addr);
        return localVarResp.getData();
    }

    /**
     * This endpoint returns a specific connection.
     * 
     * @param addr Address port (required)
     * @return ApiResponse&lt;NetworkConnectionSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a connection struct </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkConnectionSchema> networkConnectionWithHttpInfo(String addr) throws ApiException {
        okhttp3.Call localVarCall = networkConnectionValidateBeforeCall(addr, null);
        Type localVarReturnType = new TypeToken<NetworkConnectionSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This endpoint returns a specific connection. (asynchronously)
     * 
     * @param addr Address port (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a connection struct </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionAsync(String addr, final ApiCallback<NetworkConnectionSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkConnectionValidateBeforeCall(addr, _callback);
        Type localVarReturnType = new TypeToken<NetworkConnectionSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkConnections
     * @param states Connection status. (optional)
     * @param direction Direction of the connection. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return networks connections </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsCall(String states, String direction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/network/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (states != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("states", states));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkConnectionsValidateBeforeCall(String states, String direction, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = networkConnectionsCall(states, direction, _callback);
        return localVarCall;

    }

    /**
     * This endpoint returns all outgoings connections.
     * 
     * @param states Connection status. (optional)
     * @param direction Direction of the connection. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return networks connections </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 networkConnections(String states, String direction) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = networkConnectionsWithHttpInfo(states, direction);
        return localVarResp.getData();
    }

    /**
     * This endpoint returns all outgoings connections.
     * 
     * @param states Connection status. (optional)
     * @param direction Direction of the connection. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return networks connections </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> networkConnectionsWithHttpInfo(String states, String direction) throws ApiException {
        okhttp3.Call localVarCall = networkConnectionsValidateBeforeCall(states, direction, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This endpoint returns all outgoings connections. (asynchronously)
     * 
     * @param states Connection status. (optional)
     * @param direction Direction of the connection. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return networks connections </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsAsync(String states, String direction, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkConnectionsValidateBeforeCall(states, direction, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkConnectionsDisconnect
     * @param id Address id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsDisconnectCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/network/connection/disconnect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkConnectionsDisconnectValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkConnectionsDisconnect(Async)");
        }
        

        okhttp3.Call localVarCall = networkConnectionsDisconnectCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint disconnects a connection by ID or address
     * @param id Address id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public void networkConnectionsDisconnect(String id) throws ApiException {
        networkConnectionsDisconnectWithHttpInfo(id);
    }

    /**
     * 
     * This endpoint disconnects a connection by ID or address
     * @param id Address id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> networkConnectionsDisconnectWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkConnectionsDisconnectValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This endpoint disconnects a connection by ID or address
     * @param id Address id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsDisconnectAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkConnectionsDisconnectValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkConnectionsExchange
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of all connections found through peer exchange. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsExchangeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/network/connections/exchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkConnectionsExchangeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = networkConnectionsExchangeCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint returns all connections found through peer exchange
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of all connections found through peer exchange. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> networkConnectionsExchange() throws ApiException {
        ApiResponse<List<String>> localVarResp = networkConnectionsExchangeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint returns all connections found through peer exchange
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of all connections found through peer exchange. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> networkConnectionsExchangeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = networkConnectionsExchangeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint returns all connections found through peer exchange
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of all connections found through peer exchange. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsExchangeAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkConnectionsExchangeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkConnectionsTrust
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of trusted connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsTrustCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/network/connections/trust";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkConnectionsTrustValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = networkConnectionsTrustCall(_callback);
        return localVarCall;

    }

    /**
     * trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of trusted connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> networkConnectionsTrust() throws ApiException {
        ApiResponse<List<String>> localVarResp = networkConnectionsTrustWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of trusted connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> networkConnectionsTrustWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = networkConnectionsTrustValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return a list of trusted connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkConnectionsTrustAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkConnectionsTrustValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outputsGet
     * @param address  (optional)
     * @param hash  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outputsGetCall(List<String> address, List<String> hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/outputs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (address != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "address", address));
        }

        if (hash != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outputsGetValidateBeforeCall(List<String> address, List<String> hash, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = outputsGetCall(address, hash, _callback);
        return localVarCall;

    }

    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * 
     * @param address  (optional)
     * @param hash  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object outputsGet(List<String> address, List<String> hash) throws ApiException {
        ApiResponse<Object> localVarResp = outputsGetWithHttpInfo(address, hash);
        return localVarResp.getData();
    }

    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * 
     * @param address  (optional)
     * @param hash  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> outputsGetWithHttpInfo(List<String> address, List<String> hash) throws ApiException {
        okhttp3.Call localVarCall = outputsGetValidateBeforeCall(address, hash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. (asynchronously)
     * 
     * @param address  (optional)
     * @param hash  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outputsGetAsync(List<String> address, List<String> hash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = outputsGetValidateBeforeCall(address, hash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outputsPost
     * @param address  (optional)
     * @param hash  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outputsPostCall(String address, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/outputs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outputsPostValidateBeforeCall(String address, String hash, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = outputsPostCall(address, hash, _callback);
        return localVarCall;

    }

    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * 
     * @param address  (optional)
     * @param hash  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object outputsPost(String address, String hash) throws ApiException {
        ApiResponse<Object> localVarResp = outputsPostWithHttpInfo(address, hash);
        return localVarResp.getData();
    }

    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * 
     * @param address  (optional)
     * @param hash  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> outputsPostWithHttpInfo(String address, String hash) throws ApiException {
        okhttp3.Call localVarCall = outputsPostValidateBeforeCall(address, hash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. (asynchronously)
     * 
     * @param address  (optional)
     * @param hash  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UnspentOutputsSummary records unspent outputs in different status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outputsPostAsync(String address, String hash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = outputsPostValidateBeforeCall(address, hash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pendingTxs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction inputs include the owner address, coins, hours and calculated hours. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pendingTxsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/pendingTxs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pendingTxsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pendingTxsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction inputs include the owner address, coins, hours and calculated hours. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse20010> pendingTxs() throws ApiException {
        ApiResponse<List<InlineResponse20010>> localVarResp = pendingTxsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse20010&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction inputs include the owner address, coins, hours and calculated hours. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse20010>> pendingTxsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pendingTxsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20010>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction inputs include the owner address, coins, hours and calculated hours. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pendingTxsAsync(final ApiCallback<List<InlineResponse20010>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pendingTxsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse20010>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendUnconfirmedTxns
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, Broadcasts all unconfirmed transactions from the unconfirmed transaction pool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendUnconfirmedTxnsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/resendUnconfirmedTxns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application-json", "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendUnconfirmedTxnsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = resendUnconfirmedTxnsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, Broadcasts all unconfirmed transactions from the unconfirmed transaction pool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object resendUnconfirmedTxns() throws ApiException {
        ApiResponse<Object> localVarResp = resendUnconfirmedTxnsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, Broadcasts all unconfirmed transactions from the unconfirmed transaction pool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> resendUnconfirmedTxnsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resendUnconfirmedTxnsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, Broadcasts all unconfirmed transactions from the unconfirmed transaction pool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendUnconfirmedTxnsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendUnconfirmedTxnsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for richlist
     * @param includeDistribution include distribution addresses or not, default value false (optional)
     * @param n include distribution addresses or not, default value false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represent richlist response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call richlistCall(Boolean includeDistribution, String n, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/richlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeDistribution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-distribution", includeDistribution));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call richlistValidateBeforeCall(Boolean includeDistribution, String n, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = richlistCall(includeDistribution, n, _callback);
        return localVarCall;

    }

    /**
     * Returns the top skycoin holders.
     * 
     * @param includeDistribution include distribution addresses or not, default value false (optional)
     * @param n include distribution addresses or not, default value false (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represent richlist response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object richlist(Boolean includeDistribution, String n) throws ApiException {
        ApiResponse<Object> localVarResp = richlistWithHttpInfo(includeDistribution, n);
        return localVarResp.getData();
    }

    /**
     * Returns the top skycoin holders.
     * 
     * @param includeDistribution include distribution addresses or not, default value false (optional)
     * @param n include distribution addresses or not, default value false (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represent richlist response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> richlistWithHttpInfo(Boolean includeDistribution, String n) throws ApiException {
        okhttp3.Call localVarCall = richlistValidateBeforeCall(includeDistribution, n, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the top skycoin holders. (asynchronously)
     * 
     * @param includeDistribution include distribution addresses or not, default value false (optional)
     * @param n include distribution addresses or not, default value false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represent richlist response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call richlistAsync(Boolean includeDistribution, String n, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = richlistValidateBeforeCall(includeDistribution, n, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transaction
     * @param txid transaction Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction identified by its txid hash. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionCall(String txid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (txid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("txid", txid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling transaction(Async)");
        }
        

        okhttp3.Call localVarCall = transactionCall(txid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a transaction identified by its txid hash with just id
     * @param txid transaction Id (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction identified by its txid hash. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Transaction transaction(String txid) throws ApiException {
        ApiResponse<Transaction> localVarResp = transactionWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a transaction identified by its txid hash with just id
     * @param txid transaction Id (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction identified by its txid hash. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> transactionWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = transactionValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a transaction identified by its txid hash with just id
     * @param txid transaction Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a transaction identified by its txid hash. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionAsync(String txid, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionInject
     * @param rawtx hex-encoded serialized transaction string. (required)
     * @param noBroadcast Disable the network broadcast (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Broadcasts a hex-encoded, serialized transaction to the network </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionInjectCall(String rawtx, Boolean noBroadcast, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/injectTransaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (rawtx != null) {
            localVarHeaderParams.put("rawtx", localVarApiClient.parameterToString(rawtx));
        }

        if (noBroadcast != null) {
            localVarHeaderParams.put("no_broadcast", localVarApiClient.parameterToString(noBroadcast));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionInjectValidateBeforeCall(String rawtx, Boolean noBroadcast, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rawtx' is set
        if (rawtx == null) {
            throw new ApiException("Missing the required parameter 'rawtx' when calling transactionInject(Async)");
        }
        

        okhttp3.Call localVarCall = transactionInjectCall(rawtx, noBroadcast, _callback);
        return localVarCall;

    }

    /**
     * Broadcast a hex-encoded, serialized transaction to the network.
     * 
     * @param rawtx hex-encoded serialized transaction string. (required)
     * @param noBroadcast Disable the network broadcast (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Broadcasts a hex-encoded, serialized transaction to the network </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public String transactionInject(String rawtx, Boolean noBroadcast) throws ApiException {
        ApiResponse<String> localVarResp = transactionInjectWithHttpInfo(rawtx, noBroadcast);
        return localVarResp.getData();
    }

    /**
     * Broadcast a hex-encoded, serialized transaction to the network.
     * 
     * @param rawtx hex-encoded serialized transaction string. (required)
     * @param noBroadcast Disable the network broadcast (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Broadcasts a hex-encoded, serialized transaction to the network </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> transactionInjectWithHttpInfo(String rawtx, Boolean noBroadcast) throws ApiException {
        okhttp3.Call localVarCall = transactionInjectValidateBeforeCall(rawtx, noBroadcast, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Broadcast a hex-encoded, serialized transaction to the network. (asynchronously)
     * 
     * @param rawtx hex-encoded serialized transaction string. (required)
     * @param noBroadcast Disable the network broadcast (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Broadcasts a hex-encoded, serialized transaction to the network </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionInjectAsync(String rawtx, Boolean noBroadcast, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionInjectValidateBeforeCall(rawtx, noBroadcast, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionPost
     * @param transactionV2ParamsAddress  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionPostCall(TransactionV2ParamsAddress transactionV2ParamsAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionV2ParamsAddress;

        // create path and map variables
        String localVarPath = "/api/v2/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionPostValidateBeforeCall(TransactionV2ParamsAddress transactionV2ParamsAddress, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionPostCall(transactionV2ParamsAddress, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param transactionV2ParamsAddress  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2008 transactionPost(TransactionV2ParamsAddress transactionV2ParamsAddress) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = transactionPostWithHttpInfo(transactionV2ParamsAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transactionV2ParamsAddress  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2008> transactionPostWithHttpInfo(TransactionV2ParamsAddress transactionV2ParamsAddress) throws ApiException {
        okhttp3.Call localVarCall = transactionPostValidateBeforeCall(transactionV2ParamsAddress, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionV2ParamsAddress  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionPostAsync(TransactionV2ParamsAddress transactionV2ParamsAddress, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionPostValidateBeforeCall(transactionV2ParamsAddress, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionPostUnspent
     * @param transactionV2ParamsUnspent Unspent parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionPostUnspentCall(TransactionV2ParamsUnspent transactionV2ParamsUnspent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionV2ParamsUnspent;

        // create path and map variables
        String localVarPath = "/api/v2/transaction/unspent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionPostUnspentValidateBeforeCall(TransactionV2ParamsUnspent transactionV2ParamsUnspent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionV2ParamsUnspent' is set
        if (transactionV2ParamsUnspent == null) {
            throw new ApiException("Missing the required parameter 'transactionV2ParamsUnspent' when calling transactionPostUnspent(Async)");
        }
        

        okhttp3.Call localVarCall = transactionPostUnspentCall(transactionV2ParamsUnspent, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param transactionV2ParamsUnspent Unspent parameters (required)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2008 transactionPostUnspent(TransactionV2ParamsUnspent transactionV2ParamsUnspent) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = transactionPostUnspentWithHttpInfo(transactionV2ParamsUnspent);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transactionV2ParamsUnspent Unspent parameters (required)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2008> transactionPostUnspentWithHttpInfo(TransactionV2ParamsUnspent transactionV2ParamsUnspent) throws ApiException {
        okhttp3.Call localVarCall = transactionPostUnspentValidateBeforeCall(transactionV2ParamsUnspent, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionV2ParamsUnspent Unspent parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response is a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionPostUnspentAsync(TransactionV2ParamsUnspent transactionV2ParamsUnspent, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionPostUnspentValidateBeforeCall(transactionV2ParamsUnspent, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionRaw
     * @param txid Transaction id hash (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the hex-encoded byte serialization of a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionRawCall(String txid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/transaction/raw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (txid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("txid", txid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionRawValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionRawCall(txid, _callback);
        return localVarCall;

    }

    /**
     * Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * 
     * @param txid Transaction id hash (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the hex-encoded byte serialization of a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object transactionRaw(String txid) throws ApiException {
        ApiResponse<Object> localVarResp = transactionRawWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * 
     * @param txid Transaction id hash (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the hex-encoded byte serialization of a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transactionRawWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = transactionRawValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. (asynchronously)
     * 
     * @param txid Transaction id hash (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the hex-encoded byte serialization of a transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionRawAsync(String txid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionRawValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionVerify
     * @param transactionVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responses ok </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionVerifyCall(TransactionVerifyRequest transactionVerifyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionVerifyRequest;

        // create path and map variables
        String localVarPath = "/api/v2/transaction/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionVerifyValidateBeforeCall(TransactionVerifyRequest transactionVerifyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionVerifyRequest' is set
        if (transactionVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionVerifyRequest' when calling transactionVerify(Async)");
        }
        

        okhttp3.Call localVarCall = transactionVerifyCall(transactionVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Decode and verify an encoded transaction
     * @param transactionVerifyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responses ok </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object transactionVerify(TransactionVerifyRequest transactionVerifyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = transactionVerifyWithHttpInfo(transactionVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Decode and verify an encoded transaction
     * @param transactionVerifyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responses ok </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transactionVerifyWithHttpInfo(TransactionVerifyRequest transactionVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionVerifyValidateBeforeCall(transactionVerifyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Decode and verify an encoded transaction
     * @param transactionVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responses ok </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionVerifyAsync(TransactionVerifyRequest transactionVerifyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionVerifyValidateBeforeCall(transactionVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsGet
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsGetCall(String addrs, String confirmed, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addrs", addrs));
        }

        if (confirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirmed", confirmed));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsGetValidateBeforeCall(String addrs, String confirmed, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionsGetCall(addrs, confirmed, _callback);
        return localVarCall;

    }

    /**
     * Returns transactions that match the filters.
     * 
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object transactionsGet(String addrs, String confirmed) throws ApiException {
        ApiResponse<Object> localVarResp = transactionsGetWithHttpInfo(addrs, confirmed);
        return localVarResp.getData();
    }

    /**
     * Returns transactions that match the filters.
     * 
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transactionsGetWithHttpInfo(String addrs, String confirmed) throws ApiException {
        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(addrs, confirmed, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns transactions that match the filters. (asynchronously)
     * 
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsGetAsync(String addrs, String confirmed, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(addrs, confirmed, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsPost
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsPostCall(String addrs, String confirmed, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addrs", addrs));
        }

        if (confirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirmed", confirmed));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsPostValidateBeforeCall(String addrs, String confirmed, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionsPostCall(addrs, confirmed, _callback);
        return localVarCall;

    }

    /**
     * Returns transactions that match the filters.
     * 
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object transactionsPost(String addrs, String confirmed) throws ApiException {
        ApiResponse<Object> localVarResp = transactionsPostWithHttpInfo(addrs, confirmed);
        return localVarResp.getData();
    }

    /**
     * Returns transactions that match the filters.
     * 
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transactionsPostWithHttpInfo(String addrs, String confirmed) throws ApiException {
        okhttp3.Call localVarCall = transactionsPostValidateBeforeCall(addrs, confirmed, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns transactions that match the filters. (asynchronously)
     * 
     * @param addrs command separated list of addresses (optional)
     * @param confirmed Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns transactions that match the filters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsPostAsync(String addrs, String confirmed, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsPostValidateBeforeCall(addrs, confirmed, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uxout
     * @param uxid uxid to filter by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/uxout </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uxoutCall(String uxid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/uxout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uxid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uxid", uxid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uxoutValidateBeforeCall(String uxid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = uxoutCall(uxid, _callback);
        return localVarCall;

    }

    /**
     * Returns an unspent output by ID.
     * 
     * @param uxid uxid to filter by (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/uxout </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object uxout(String uxid) throws ApiException {
        ApiResponse<Object> localVarResp = uxoutWithHttpInfo(uxid);
        return localVarResp.getData();
    }

    /**
     * Returns an unspent output by ID.
     * 
     * @param uxid uxid to filter by (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/uxout </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> uxoutWithHttpInfo(String uxid) throws ApiException {
        okhttp3.Call localVarCall = uxoutValidateBeforeCall(uxid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an unspent output by ID. (asynchronously)
     * 
     * @param uxid uxid to filter by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/uxout </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uxoutAsync(String uxid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = uxoutValidateBeforeCall(uxid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAddress
     * @param address Address id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAddressCall(Address address, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/address/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAddressValidateBeforeCall(Address address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling verifyAddress(Async)");
        }
        

        okhttp3.Call localVarCall = verifyAddressCall(address, _callback);
        return localVarCall;

    }

    /**
     * Verifies a Skycoin address.
     * 
     * @param address Address id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyAddress(Address address) throws ApiException {
        ApiResponse<Object> localVarResp = verifyAddressWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Verifies a Skycoin address.
     * 
     * @param address Address id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyAddressWithHttpInfo(Address address) throws ApiException {
        okhttp3.Call localVarCall = verifyAddressValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies a Skycoin address. (asynchronously)
     * 
     * @param address Address id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAddressAsync(Address address, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAddressValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for version
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BuildInfo represents the build info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = versionCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * versionHandler returns the application version info
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BuildInfo represents the build info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2005 version() throws ApiException {
        ApiResponse<InlineResponse2005> localVarResp = versionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * versionHandler returns the application version info
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BuildInfo represents the build info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2005> versionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = versionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * versionHandler returns the application version info
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BuildInfo represents the build info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionAsync(final ApiCallback<InlineResponse2005> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wallet
     * @param id tags to filter by (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wallet(Async)");
        }
        

        okhttp3.Call localVarCall = walletCall(id, _callback);
        return localVarCall;

    }

    /**
     * Returns a wallet by id.
     * 
     * @param id tags to filter by (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object wallet(String id) throws ApiException {
        ApiResponse<Object> localVarResp = walletWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns a wallet by id.
     * 
     * @param id tags to filter by (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = walletValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a wallet by id. (asynchronously)
     * 
     * @param id tags to filter by (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletBalance
     * @param id tags to filter by (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the wallets balance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletBalanceCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletBalanceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletBalance(Async)");
        }
        

        okhttp3.Call localVarCall = walletBalanceCall(id, _callback);
        return localVarCall;

    }

    /**
     * Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param id tags to filter by (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the wallets balance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletBalance(String id) throws ApiException {
        ApiResponse<Object> localVarResp = walletBalanceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * 
     * @param id tags to filter by (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the wallets balance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletBalanceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = walletBalanceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. (asynchronously)
     * 
     * @param id tags to filter by (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the wallets balance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletBalanceAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletBalanceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletCreate
     * @param type wallet seed passphrase [optional, bip44 type wallet only] (required)
     * @param seed Wallet seed. (required)
     * @param label Wallet label. (required)
     * @param seedPassphrase wallet seed passphrase [optional, bip44 type wallet only] (optional)
     * @param bip44Coin BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)
     * @param xpub xpub key [required for xpub wallets] (optional)
     * @param scan The number of addresses to scan ahead for balances. (optional)
     * @param encrypt Encrypt wallet. (optional)
     * @param password Wallet Password (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletCreateCall(String type, String seed, String label, String seedPassphrase, String bip44Coin, String xpub, Integer scan, Boolean encrypt, String password, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (seedPassphrase != null) {
            localVarHeaderParams.put("seed-passphrase", localVarApiClient.parameterToString(seedPassphrase));
        }

        if (type != null) {
            localVarHeaderParams.put("type", localVarApiClient.parameterToString(type));
        }

        if (bip44Coin != null) {
            localVarHeaderParams.put("bip44-coin", localVarApiClient.parameterToString(bip44Coin));
        }

        if (seed != null) {
            localVarHeaderParams.put("seed", localVarApiClient.parameterToString(seed));
        }

        if (xpub != null) {
            localVarHeaderParams.put("xpub", localVarApiClient.parameterToString(xpub));
        }

        if (label != null) {
            localVarHeaderParams.put("label", localVarApiClient.parameterToString(label));
        }

        if (scan != null) {
            localVarHeaderParams.put("scan", localVarApiClient.parameterToString(scan));
        }

        if (encrypt != null) {
            localVarHeaderParams.put("encrypt", localVarApiClient.parameterToString(encrypt));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletCreateValidateBeforeCall(String type, String seed, String label, String seedPassphrase, String bip44Coin, String xpub, Integer scan, Boolean encrypt, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling walletCreate(Async)");
        }
        
        // verify the required parameter 'seed' is set
        if (seed == null) {
            throw new ApiException("Missing the required parameter 'seed' when calling walletCreate(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling walletCreate(Async)");
        }
        

        okhttp3.Call localVarCall = walletCreateCall(type, seed, label, seedPassphrase, bip44Coin, xpub, scan, encrypt, password, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a wallet
     * @param type wallet seed passphrase [optional, bip44 type wallet only] (required)
     * @param seed Wallet seed. (required)
     * @param label Wallet label. (required)
     * @param seedPassphrase wallet seed passphrase [optional, bip44 type wallet only] (optional)
     * @param bip44Coin BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)
     * @param xpub xpub key [required for xpub wallets] (optional)
     * @param scan The number of addresses to scan ahead for balances. (optional)
     * @param encrypt Encrypt wallet. (optional)
     * @param password Wallet Password (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletCreate(String type, String seed, String label, String seedPassphrase, String bip44Coin, String xpub, Integer scan, Boolean encrypt, String password) throws ApiException {
        ApiResponse<Object> localVarResp = walletCreateWithHttpInfo(type, seed, label, seedPassphrase, bip44Coin, xpub, scan, encrypt, password);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a wallet
     * @param type wallet seed passphrase [optional, bip44 type wallet only] (required)
     * @param seed Wallet seed. (required)
     * @param label Wallet label. (required)
     * @param seedPassphrase wallet seed passphrase [optional, bip44 type wallet only] (optional)
     * @param bip44Coin BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)
     * @param xpub xpub key [required for xpub wallets] (optional)
     * @param scan The number of addresses to scan ahead for balances. (optional)
     * @param encrypt Encrypt wallet. (optional)
     * @param password Wallet Password (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletCreateWithHttpInfo(String type, String seed, String label, String seedPassphrase, String bip44Coin, String xpub, Integer scan, Boolean encrypt, String password) throws ApiException {
        okhttp3.Call localVarCall = walletCreateValidateBeforeCall(type, seed, label, seedPassphrase, bip44Coin, xpub, scan, encrypt, password, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a wallet
     * @param type wallet seed passphrase [optional, bip44 type wallet only] (required)
     * @param seed Wallet seed. (required)
     * @param label Wallet label. (required)
     * @param seedPassphrase wallet seed passphrase [optional, bip44 type wallet only] (optional)
     * @param bip44Coin BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)
     * @param xpub xpub key [required for xpub wallets] (optional)
     * @param scan The number of addresses to scan ahead for balances. (optional)
     * @param encrypt Encrypt wallet. (optional)
     * @param password Wallet Password (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for endpoint /api/v1/wallet </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletCreateAsync(String type, String seed, String label, String seedPassphrase, String bip44Coin, String xpub, Integer scan, Boolean encrypt, String password, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletCreateValidateBeforeCall(type, seed, label, seedPassphrase, bip44Coin, xpub, scan, encrypt, password, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletDecrypt
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint decrypts wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletDecryptCall(String id, String password, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/decrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletDecryptValidateBeforeCall(String id, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletDecrypt(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling walletDecrypt(Async)");
        }
        

        okhttp3.Call localVarCall = walletDecryptCall(id, password, _callback);
        return localVarCall;

    }

    /**
     * Decrypts wallet.
     * 
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint decrypts wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletDecrypt(String id, String password) throws ApiException {
        ApiResponse<Object> localVarResp = walletDecryptWithHttpInfo(id, password);
        return localVarResp.getData();
    }

    /**
     * Decrypts wallet.
     * 
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint decrypts wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletDecryptWithHttpInfo(String id, String password) throws ApiException {
        okhttp3.Call localVarCall = walletDecryptValidateBeforeCall(id, password, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Decrypts wallet. (asynchronously)
     * 
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint decrypts wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletDecryptAsync(String id, String password, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletDecryptValidateBeforeCall(id, password, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletEncrypt
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint encrypt wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletEncryptCall(String id, String password, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/encrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletEncryptValidateBeforeCall(String id, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletEncrypt(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling walletEncrypt(Async)");
        }
        

        okhttp3.Call localVarCall = walletEncryptCall(id, password, _callback);
        return localVarCall;

    }

    /**
     * Encrypt wallet.
     * 
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint encrypt wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletEncrypt(String id, String password) throws ApiException {
        ApiResponse<Object> localVarResp = walletEncryptWithHttpInfo(id, password);
        return localVarResp.getData();
    }

    /**
     * Encrypt wallet.
     * 
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint encrypt wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletEncryptWithHttpInfo(String id, String password) throws ApiException {
        okhttp3.Call localVarCall = walletEncryptValidateBeforeCall(id, password, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Encrypt wallet. (asynchronously)
     * 
     * @param id Wallet id. (required)
     * @param password Wallet password. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint encrypt wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletEncryptAsync(String id, String password, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletEncryptValidateBeforeCall(id, password, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletFolder
     * @param addr Address port (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return the wallet directory path </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletFolderCall(String addr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallets/folderName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addr", addr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletFolderValidateBeforeCall(String addr, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addr' is set
        if (addr == null) {
            throw new ApiException("Missing the required parameter 'addr' when calling walletFolder(Async)");
        }
        

        okhttp3.Call localVarCall = walletFolderCall(addr, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the wallet directory path
     * @param addr Address port (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return the wallet directory path </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2007 walletFolder(String addr) throws ApiException {
        ApiResponse<InlineResponse2007> localVarResp = walletFolderWithHttpInfo(addr);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the wallet directory path
     * @param addr Address port (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return the wallet directory path </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2007> walletFolderWithHttpInfo(String addr) throws ApiException {
        okhttp3.Call localVarCall = walletFolderValidateBeforeCall(addr, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the wallet directory path
     * @param addr Address port (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return the wallet directory path </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletFolderAsync(String addr, final ApiCallback<InlineResponse2007> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletFolderValidateBeforeCall(addr, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletNewAddress
     * @param id Wallet Id (required)
     * @param num The number you want to generate (optional)
     * @param password Wallet Password (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint generate new addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletNewAddressCall(String id, String num, String password, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/newAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletNewAddressValidateBeforeCall(String id, String num, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletNewAddress(Async)");
        }
        

        okhttp3.Call localVarCall = walletNewAddressCall(id, num, password, _callback);
        return localVarCall;

    }

    /**
     * 
     * Generates new addresses
     * @param id Wallet Id (required)
     * @param num The number you want to generate (optional)
     * @param password Wallet Password (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint generate new addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletNewAddress(String id, String num, String password) throws ApiException {
        ApiResponse<Object> localVarResp = walletNewAddressWithHttpInfo(id, num, password);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates new addresses
     * @param id Wallet Id (required)
     * @param num The number you want to generate (optional)
     * @param password Wallet Password (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint generate new addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletNewAddressWithHttpInfo(String id, String num, String password) throws ApiException {
        okhttp3.Call localVarCall = walletNewAddressValidateBeforeCall(id, num, password, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates new addresses
     * @param id Wallet Id (required)
     * @param num The number you want to generate (optional)
     * @param password Wallet Password (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint generate new addresses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletNewAddressAsync(String id, String num, String password, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletNewAddressValidateBeforeCall(id, num, password, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletNewSeed
     * @param entropy Entropy bitSize. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generates wallet seed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletNewSeedCall(String entropy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/newSeed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entropy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entropy", entropy));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletNewSeedValidateBeforeCall(String entropy, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = walletNewSeedCall(entropy, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the wallet directory path
     * @param entropy Entropy bitSize. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generates wallet seed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletNewSeed(String entropy) throws ApiException {
        ApiResponse<Object> localVarResp = walletNewSeedWithHttpInfo(entropy);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the wallet directory path
     * @param entropy Entropy bitSize. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generates wallet seed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletNewSeedWithHttpInfo(String entropy) throws ApiException {
        okhttp3.Call localVarCall = walletNewSeedValidateBeforeCall(entropy, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the wallet directory path
     * @param entropy Entropy bitSize. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generates wallet seed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletNewSeedAsync(String entropy, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletNewSeedValidateBeforeCall(entropy, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletRecover
     * @param id Wallet id. (required)
     * @param seed Wallet seed. (required)
     * @param seedPassphrase Wallet seed-passphrase. (optional)
     * @param password Wallet password. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint recover wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletRecoverCall(String id, String seed, String seedPassphrase, String password, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/wallet/recover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        if (seed != null) {
            localVarHeaderParams.put("seed", localVarApiClient.parameterToString(seed));
        }

        if (seedPassphrase != null) {
            localVarHeaderParams.put("seed-passphrase", localVarApiClient.parameterToString(seedPassphrase));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletRecoverValidateBeforeCall(String id, String seed, String seedPassphrase, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletRecover(Async)");
        }
        
        // verify the required parameter 'seed' is set
        if (seed == null) {
            throw new ApiException("Missing the required parameter 'seed' when calling walletRecover(Async)");
        }
        

        okhttp3.Call localVarCall = walletRecoverCall(id, seed, seedPassphrase, password, _callback);
        return localVarCall;

    }

    /**
     * Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
     * @param id Wallet id. (required)
     * @param seed Wallet seed. (required)
     * @param seedPassphrase Wallet seed-passphrase. (optional)
     * @param password Wallet password. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint recover wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletRecover(String id, String seed, String seedPassphrase, String password) throws ApiException {
        ApiResponse<Object> localVarResp = walletRecoverWithHttpInfo(id, seed, seedPassphrase, password);
        return localVarResp.getData();
    }

    /**
     * Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
     * @param id Wallet id. (required)
     * @param seed Wallet seed. (required)
     * @param seedPassphrase Wallet seed-passphrase. (optional)
     * @param password Wallet password. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint recover wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletRecoverWithHttpInfo(String id, String seed, String seedPassphrase, String password) throws ApiException {
        okhttp3.Call localVarCall = walletRecoverValidateBeforeCall(id, seed, seedPassphrase, password, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. (asynchronously)
     * Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
     * @param id Wallet id. (required)
     * @param seed Wallet seed. (required)
     * @param seedPassphrase Wallet seed-passphrase. (optional)
     * @param password Wallet password. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint recover wallets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletRecoverAsync(String id, String seed, String seedPassphrase, String password, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletRecoverValidateBeforeCall(id, seed, seedPassphrase, password, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletSeed
     * @param id Wallet Id. (required)
     * @param password Wallet password. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns seed of wallet of given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletSeedCall(String id, String password, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/seed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletSeedValidateBeforeCall(String id, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletSeed(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling walletSeed(Async)");
        }
        

        okhttp3.Call localVarCall = walletSeedCall(id, password, _callback);
        return localVarCall;

    }

    /**
     * This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * 
     * @param id Wallet Id. (required)
     * @param password Wallet password. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns seed of wallet of given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletSeed(String id, String password) throws ApiException {
        ApiResponse<Object> localVarResp = walletSeedWithHttpInfo(id, password);
        return localVarResp.getData();
    }

    /**
     * This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * 
     * @param id Wallet Id. (required)
     * @param password Wallet password. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns seed of wallet of given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletSeedWithHttpInfo(String id, String password) throws ApiException {
        okhttp3.Call localVarCall = walletSeedValidateBeforeCall(id, password, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. (asynchronously)
     * 
     * @param id Wallet Id. (required)
     * @param password Wallet password. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns seed of wallet of given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletSeedAsync(String id, String password, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletSeedValidateBeforeCall(id, password, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletSeedVerify
     * @param seed Seed to be verified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifies a wallet seed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletSeedVerifyCall(String seed, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v2/wallet/seed/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (seed != null) {
            localVarHeaderParams.put("seed", localVarApiClient.parameterToString(seed));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletSeedVerifyValidateBeforeCall(String seed, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = walletSeedVerifyCall(seed, _callback);
        return localVarCall;

    }

    /**
     * Verifies a wallet seed.
     * 
     * @param seed Seed to be verified. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifies a wallet seed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletSeedVerify(String seed) throws ApiException {
        ApiResponse<Object> localVarResp = walletSeedVerifyWithHttpInfo(seed);
        return localVarResp.getData();
    }

    /**
     * Verifies a wallet seed.
     * 
     * @param seed Seed to be verified. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifies a wallet seed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletSeedVerifyWithHttpInfo(String seed) throws ApiException {
        okhttp3.Call localVarCall = walletSeedVerifyValidateBeforeCall(seed, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies a wallet seed. (asynchronously)
     * 
     * @param seed Seed to be verified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifies a wallet seed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletSeedVerifyAsync(String seed, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletSeedVerifyValidateBeforeCall(seed, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransaction
     * @param walletTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns blocks between a start and end point. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletTransactionCall(WalletTransactionRequest walletTransactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = walletTransactionRequest;

        // create path and map variables
        String localVarPath = "/api/v1/wallet/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionValidateBeforeCall(WalletTransactionRequest walletTransactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletTransactionRequest' is set
        if (walletTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionRequest' when calling walletTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = walletTransactionCall(walletTransactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a signed transaction
     * 
     * @param walletTransactionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns blocks between a start and end point. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletTransaction(WalletTransactionRequest walletTransactionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = walletTransactionWithHttpInfo(walletTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a signed transaction
     * 
     * @param walletTransactionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns blocks between a start and end point. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletTransactionWithHttpInfo(WalletTransactionRequest walletTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionValidateBeforeCall(walletTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a signed transaction (asynchronously)
     * 
     * @param walletTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns blocks between a start and end point. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletTransactionAsync(WalletTransactionRequest walletTransactionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionValidateBeforeCall(walletTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactionSign
     * @param walletTransactionSignRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signs an unsigned transaction, returning the transaction with updated signatures and the encoded, serialized transaction. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletTransactionSignCall(WalletTransactionSignRequest walletTransactionSignRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = walletTransactionSignRequest;

        // create path and map variables
        String localVarPath = "/api/v2/wallet/transaction/sign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionSignValidateBeforeCall(WalletTransactionSignRequest walletTransactionSignRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletTransactionSignRequest' is set
        if (walletTransactionSignRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionSignRequest' when calling walletTransactionSign(Async)");
        }
        

        okhttp3.Call localVarCall = walletTransactionSignCall(walletTransactionSignRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a signed transaction
     * 
     * @param walletTransactionSignRequest  (required)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signs an unsigned transaction, returning the transaction with updated signatures and the encoded, serialized transaction. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2009 walletTransactionSign(WalletTransactionSignRequest walletTransactionSignRequest) throws ApiException {
        ApiResponse<InlineResponse2009> localVarResp = walletTransactionSignWithHttpInfo(walletTransactionSignRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a signed transaction
     * 
     * @param walletTransactionSignRequest  (required)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signs an unsigned transaction, returning the transaction with updated signatures and the encoded, serialized transaction. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2009> walletTransactionSignWithHttpInfo(WalletTransactionSignRequest walletTransactionSignRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionSignValidateBeforeCall(walletTransactionSignRequest, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a signed transaction (asynchronously)
     * 
     * @param walletTransactionSignRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Signs an unsigned transaction, returning the transaction with updated signatures and the encoded, serialized transaction. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletTransactionSignAsync(WalletTransactionSignRequest walletTransactionSignRequest, final ApiCallback<InlineResponse2009> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionSignValidateBeforeCall(walletTransactionSignRequest, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactions
     * @param id Wallet Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns all unconfirmed transactions for all addresses in a given wallet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletTransactionsCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = walletTransactionsCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Wallet Id. (required)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns all unconfirmed transactions for all addresses in a given wallet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2006 walletTransactions(String id) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp = walletTransactionsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Wallet Id. (required)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns all unconfirmed transactions for all addresses in a given wallet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2006> walletTransactionsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Wallet Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns all unconfirmed transactions for all addresses in a given wallet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletTransactionsAsync(String id, final ApiCallback<InlineResponse2006> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletUnload
     * @param id Wallet Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns nothing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletUnloadCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/unload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletUnloadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletUnload(Async)");
        }
        

        okhttp3.Call localVarCall = walletUnloadCall(id, _callback);
        return localVarCall;

    }

    /**
     * Unloads wallet from the wallet service.
     * 
     * @param id Wallet Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns nothing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public void walletUnload(String id) throws ApiException {
        walletUnloadWithHttpInfo(id);
    }

    /**
     * Unloads wallet from the wallet service.
     * 
     * @param id Wallet Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns nothing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> walletUnloadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = walletUnloadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unloads wallet from the wallet service. (asynchronously)
     * 
     * @param id Wallet Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint returns nothing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletUnloadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletUnloadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletUpdate
     * @param id Wallet Id. (required)
     * @param label The label the wallet will be updated to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns the label the wallet will be updated to . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletUpdateCall(String id, String label, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallet/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        if (label != null) {
            localVarHeaderParams.put("label", localVarApiClient.parameterToString(label));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "csrfAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletUpdateValidateBeforeCall(String id, String label, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletUpdate(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling walletUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = walletUpdateCall(id, label, _callback);
        return localVarCall;

    }

    /**
     * Update the wallet.
     * 
     * @param id Wallet Id. (required)
     * @param label The label the wallet will be updated to. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns the label the wallet will be updated to . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public String walletUpdate(String id, String label) throws ApiException {
        ApiResponse<String> localVarResp = walletUpdateWithHttpInfo(id, label);
        return localVarResp.getData();
    }

    /**
     * Update the wallet.
     * 
     * @param id Wallet Id. (required)
     * @param label The label the wallet will be updated to. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns the label the wallet will be updated to . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> walletUpdateWithHttpInfo(String id, String label) throws ApiException {
        okhttp3.Call localVarCall = walletUpdateValidateBeforeCall(id, label, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the wallet. (asynchronously)
     * 
     * @param id Wallet Id. (required)
     * @param label The label the wallet will be updated to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint Returns the label the wallet will be updated to . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletUpdateAsync(String id, String label, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletUpdateValidateBeforeCall(id, label, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wallets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return all loaded wallets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = walletsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all loaded wallets
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return all loaded wallets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> wallets() throws ApiException {
        ApiResponse<List<Object>> localVarResp = walletsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all loaded wallets
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return all loaded wallets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> walletsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = walletsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all loaded wallets
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This endpoint return all loaded wallets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A GenericError is the default error message that is generated. For certain status codes there are more appropriate error structures. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletsAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
