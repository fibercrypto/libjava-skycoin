/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package skycoin;

public class skycoinJNI {
  public final static native void destroy_cipher_SecKeys(long jarg1, cipher_SecKeys jarg1_);
  public final static native int equalSlices(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, int jarg3);
  public final static native int equalTransactions(long jarg1, coin__Transaction jarg1_, long jarg2, coin__Transaction jarg2_);
  public final static native int equalTransactionsArrays(long jarg1, long jarg2);
  public final static native int equalBlockHeaders(long jarg1, coin__BlockHeader jarg1_, long jarg2, coin__BlockHeader jarg2_);
  public final static native int hola1();
  public final static native void SKY_handle_close(long jarg1);
  public final static native long zeroFeeCalculator(long jarg1, long jarg2, long jarg3);
  public final static native long calcFeeCalculator(long jarg1, long jarg2, long jarg3);
  public final static native long fix121FeeCalculator(long jarg1, long jarg2, long jarg3);
  public final static native long badFeeCalculator(long jarg1, long jarg2, long jarg3);
  public final static native long overflowFeeCalculator(long jarg1, long jarg2, long jarg3);
  public final static native long feeCalc();
  public final static native long fix121();
  public final static native long badCalc();
  public final static native long calcCalc();
  public final static native long overflow();
  public final static native void MEMPOOLIDX_set(int jarg1);
  public final static native int MEMPOOLIDX_get();
  public final static native void MEMPOOL_set(long jarg1);
  public final static native long MEMPOOL_get();
  public final static native void JSONPOOLIDX_set(int jarg1);
  public final static native int JSONPOOLIDX_get();
  public final static native void JSON_POOL_set(long jarg1);
  public final static native long JSON_POOL_get();
  public final static native void HANDLEPOOLIDX_set(int jarg1);
  public final static native int HANDLEPOOLIDX_get();
  public final static native void HANDLE_POOL_set(long jarg1);
  public final static native long HANDLE_POOL_get();
  public final static native void wallet_register_client_set(long jarg1, wallet_register jarg1_, long jarg2);
  public final static native long wallet_register_client_get(long jarg1, wallet_register jarg1_);
  public final static native void wallet_register_wallet_set(long jarg1, wallet_register jarg1_, long jarg2);
  public final static native long wallet_register_wallet_get(long jarg1, wallet_register jarg1_);
  public final static native long new_wallet_register();
  public final static native void delete_wallet_register(long jarg1);
  public final static native void WALLETPOOLIDX_set(int jarg1);
  public final static native int WALLETPOOLIDX_get();
  public final static native void WALLET_POOL_set(long jarg1, wallet_register jarg1_);
  public final static native long WALLET_POOL_get();
  public final static native void stdout_backup_set(int jarg1);
  public final static native int stdout_backup_get();
  public final static native void pipefd_set(long jarg1);
  public final static native long pipefd_get();
  public final static native long registerMemCleanup(long jarg1);
  public final static native void freeRegisteredMemCleanup(long jarg1);
  public final static native int registerJsonFree(long jarg1);
  public final static native void freeRegisteredJson(long jarg1);
  public final static native int registerWalletClean(long jarg1, long jarg2);
  public final static native int registerHandleClose(long jarg1);
  public final static native void closeRegisteredHandle(long jarg1);
  public final static native void cleanupWallet(long jarg1, long jarg2);
  public final static native void cleanRegisteredWallet(long jarg1, long jarg2);
  public final static native void cleanupMem();
  public final static native void setup();
  public final static native void teardown();
  public final static native void fprintbuff(long jarg1, long jarg2, long jarg3);
  public final static native int parseBoolean(String jarg1, int jarg2);
  public final static native void toGoString(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native int copySlice(long jarg1, long jarg2, int jarg3);
  public final static native int concatSlices(long jarg1, long jarg2, int jarg3, long jarg4);
  public final static native void parseJsonMetaData(String jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int cutSlice(long jarg1, int jarg2, int jarg3, int jarg4, long jarg5);
  public final static native long makeEmptyTransaction(long jarg1);
  public final static native int makeUxBodyWithSecret(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native int makeUxOutWithSecret(long jarg1, coin__UxOut jarg1_, long jarg2);
  public final static native int makeUxOut(long jarg1, coin__UxOut jarg1_);
  public final static native int makeUxArray(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native int makeAddress(long jarg1, cipher__Address jarg1_);
  public final static native long makeTransactionFromUxOut(long jarg1, coin__UxOut jarg1_, long jarg2, long jarg3);
  public final static native long makeTransaction(long jarg1);
  public final static native int makeTransactions(int jarg1, long jarg2);
  public final static native int b64_int(long jarg1);
  public final static native int b64_decode(long jarg1, long jarg2, long jarg3);
  public final static native int DecodeBase64(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native int putUvarint(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2);
  public final static native int putVarint(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native void hashKeyIndexNonce(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void makeEncryptedData(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native void convertGoUint8toSHA256(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_cipher_SumSHA256__SWIG_0(long jarg1, GoSlice jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_cipher_SignHash__SWIG_0(long jarg1, cipher_SHA256 jarg1_, long jarg2, long jarg3, cipher_Sig jarg3_);
  public final static native long SKY_cipher_ChkSig(long jarg1, cipher__Address jarg1_, long jarg2, cipher_SHA256 jarg2_, long jarg3, cipher_Sig jarg3_);
  public final static native long SKY_cipher_PubKeyFromSig__SWIG_0(long jarg1, cipher_Sig jarg1_, long jarg2, cipher_SHA256 jarg2_, long jarg3, cipher_PubKey jarg3_);
  public final static native long SKY_cipher_VerifySignature(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_Sig jarg2_, long jarg3, cipher_SHA256 jarg3_);
  public final static native long SKY_cipher_SHA256_Set__SWIG_0(long jarg1, cipher_SHA256 jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_cipher_SHA256_Hex__SWIG_0(long jarg1, cipher_SHA256 jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256FromHex__SWIG_0(long jarg1, _GoString_ jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_Transaction_HashInner__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_Transaction_Hash__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_Transaction_SetInputAt__SWIG_0(long jarg1, long jarg2, long jarg3, cipher_SHA256 jarg3_);
  public final static native long SKY_coin_Transaction_GetInputAt__SWIG_0(long jarg1, long jarg2, long jarg3, cipher_SHA256 jarg3_);
  public final static native long SKY_coin_Transaction_PushInput__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_, long jarg3);
  public final static native long SKY_coin_Transaction_SignInputs__SWIG_0(long jarg1, long jarg2, cipher_SecKeys jarg2_);
  public final static native long SKY_cipher_GenerateDeterministicKeyPairs__SWIG_0(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, cipher_SecKeys jarg3_);
  public final static native long SKY_cipher_GenerateDeterministicKeyPairsSeed__SWIG_0(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4, cipher_SecKeys jarg4_);
  public final static native long SKY_coin_VerifyTransactionCoinsSpending__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin_UxOutArray jarg2_);
  public final static native long SKY_coin_VerifyTransactionHoursSpending__SWIG_0(java.math.BigInteger jarg1, long jarg2, coin_UxOutArray jarg2_, long jarg3, coin_UxOutArray jarg3_);
  public final static native long SKY_coin_CreateUnspents__SWIG_0(long jarg1, coin__BlockHeader jarg1_, long jarg2, long jarg3, coin_UxOutArray jarg3_);
  public final static native long SKY_coin_Transaction_VerifyInput__SWIG_0(long jarg1, long jarg2, coin_UxOutArray jarg2_);
  public final static native long SKY_coin_UxArray_HasDupes__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2);
  public final static native long SKY_coin_UxArray_Coins__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2);
  public final static native long SKY_coin_UxArray_CoinHours__SWIG_0(long jarg1, coin_UxOutArray jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Less__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_UxArray_Swap__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Sub__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin_UxOutArray jarg2_, long jarg3, coin_UxOutArray jarg3_);
  public final static native long SKY_coin_UxArray_Add__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin_UxOutArray jarg2_, long jarg3, coin_UxOutArray jarg3_);
  public final static native long SKY_coin_NewAddressUxOuts__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2);
  public final static native long SKY_coin_UxArray_Hashes__SWIG_0(long jarg1, coin_UxOutArray jarg1_, long jarg2, cipher_SHA256s jarg2_);
  public final static native long SKY_coin_AddressUxOuts_Flatten__SWIG_0(long jarg1, long jarg2, coin_UxOutArray jarg2_);
  public final static native long SKY_coin_AddressUxOuts_Get__SWIG_0(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3, coin_UxOutArray jarg3_);
  public final static native long SKY_coin_AddressUxOuts_Set__SWIG_0(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3, coin_UxOutArray jarg3_);
  public final static native long SKY_coin_AddressUxOuts_Keys__SWIG_0(long jarg1, long jarg2, cipher_Addresses jarg2_);
  public final static native long SKY_coin_Transactions_Hashes__SWIG_0(long jarg1, long jarg2, cipher_SHA256s jarg2_);
  public final static native long SKY_coin_UxOut_Hash__SWIG_0(long jarg1, coin__UxOut jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_cipher_AddSHA256__SWIG_0(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_, long jarg3, cipher_SHA256 jarg3_);
  public final static native long SKY_coin_GetTransactionObject__SWIG_0(long jarg1, long jarg2, coin__Transaction jarg2_);
  public final static native long SKY_coin_UxBody_Hash__SWIG_0(long jarg1, coin__UxBody jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_UxOut_SnapshotHash__SWIG_0(long jarg1, coin__UxOut jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_fee_TransactionFee__SWIG_0(long jarg1, java.math.BigInteger jarg2, long jarg3, coin_UxOutArray jarg3_, long jarg4);
  public final static native long SKY_cipher_CheckSecKeyHash__SWIG_0(long jarg1, cipher_SecKey jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_NewBlock__SWIG_0(long jarg1, java.math.BigInteger jarg2, long jarg3, cipher_SHA256 jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_coin_Block_HashHeader__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_Block_PreHashHeader__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_BlockBody_Hash__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_BlockHeader_Hash__SWIG_0(long jarg1, coin__BlockHeader jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long SKY_coin_Block_HashBody__SWIG_0(long jarg1, long jarg2, cipher_SHA256 jarg2_);
  public final static native int cipher_PubKey_isEqual(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native void cipher_PubKey_assignFrom(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native void cipher_PubKey_assignTo(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native void cipher_PubKey_assignSlice(long jarg1, cipher_PubKey jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long cipher_PubKey_toSlice(long jarg1, cipher_PubKey jarg1_);
  public final static native void cipher_PubKey_data_set(long jarg1, cipher_PubKey jarg1_, long jarg2);
  public final static native long cipher_PubKey_data_get(long jarg1, cipher_PubKey jarg1_);
  public final static native long new_cipher_PubKey();
  public final static native void delete_cipher_PubKey(long jarg1);
  public final static native int cipher_SecKey_isEqual(long jarg1, cipher_SecKey jarg1_, long jarg2, cipher_SecKey jarg2_);
  public final static native void cipher_SecKey_assignFrom(long jarg1, cipher_SecKey jarg1_, long jarg2);
  public final static native void cipher_SecKey_assignTo(long jarg1, cipher_SecKey jarg1_, long jarg2);
  public final static native void cipher_SecKey_data_set(long jarg1, cipher_SecKey jarg1_, long jarg2);
  public final static native long cipher_SecKey_data_get(long jarg1, cipher_SecKey jarg1_);
  public final static native long new_cipher_SecKey();
  public final static native void delete_cipher_SecKey(long jarg1);
  public final static native int cipher_Ripemd160_isEqual(long jarg1, cipher_Ripemd160 jarg1_, long jarg2, cipher_Ripemd160 jarg2_);
  public final static native void cipher_Ripemd160_assignFrom(long jarg1, cipher_Ripemd160 jarg1_, long jarg2);
  public final static native void cipher_Ripemd160_assignTo(long jarg1, cipher_Ripemd160 jarg1_, long jarg2);
  public final static native void cipher_Ripemd160_data_set(long jarg1, cipher_Ripemd160 jarg1_, long jarg2);
  public final static native long cipher_Ripemd160_data_get(long jarg1, cipher_Ripemd160 jarg1_);
  public final static native long new_cipher_Ripemd160();
  public final static native void delete_cipher_Ripemd160(long jarg1);
  public final static native int cipher_Sig_isEqual(long jarg1, cipher_Sig jarg1_, long jarg2, cipher_Sig jarg2_);
  public final static native void cipher_Sig_assignFrom(long jarg1, cipher_Sig jarg1_, long jarg2);
  public final static native void cipher_Sig_assignTo(long jarg1, cipher_Sig jarg1_, long jarg2);
  public final static native void cipher_Sig_data_set(long jarg1, cipher_Sig jarg1_, long jarg2);
  public final static native long cipher_Sig_data_get(long jarg1, cipher_Sig jarg1_);
  public final static native long new_cipher_Sig();
  public final static native void delete_cipher_Sig(long jarg1);
  public final static native int cipher_SHA256_isEqual(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void cipher_SHA256_assignFrom(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void cipher_SHA256_assignTo(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long cipher_SHA256_getStr(long jarg1, cipher_SHA256 jarg1_);
  public final static native void cipher_SHA256_data_set(long jarg1, cipher_SHA256 jarg1_, long jarg2);
  public final static native long cipher_SHA256_data_get(long jarg1, cipher_SHA256 jarg1_);
  public final static native long new_cipher_SHA256();
  public final static native void delete_cipher_SHA256(long jarg1);
  public final static native int cipher_Checksum_isEqual(long jarg1, cipher_Checksum jarg1_, long jarg2, cipher_Checksum jarg2_);
  public final static native void cipher_Checksum_assignFrom(long jarg1, cipher_Checksum jarg1_, long jarg2);
  public final static native void cipher_Checksum_assignTo(long jarg1, cipher_Checksum jarg1_, long jarg2);
  public final static native void cipher_Checksum_data_set(long jarg1, cipher_Checksum jarg1_, long jarg2);
  public final static native long cipher_Checksum_data_get(long jarg1, cipher_Checksum jarg1_);
  public final static native long new_cipher_Checksum();
  public final static native void delete_cipher_Checksum(long jarg1);
  public final static native long cipher_SecKeys_getAt(long jarg1, cipher_SecKeys jarg1_, int jarg2);
  public final static native int cipher_SecKeys_setAt(long jarg1, cipher_SecKeys jarg1_, int jarg2, long jarg3, cipher_SecKey jarg3_);
  public final static native int cipher_SecKeys_isEqual(long jarg1, cipher_SecKeys jarg1_, long jarg2, cipher_SecKeys jarg2_);
  public final static native void cipher_SecKeys_allocate(long jarg1, cipher_SecKeys jarg1_, int jarg2);
  public final static native void cipher_SecKeys_release(long jarg1, cipher_SecKeys jarg1_);
  public final static native void cipher_SecKeys_data_set(long jarg1, cipher_SecKeys jarg1_, long jarg2, cipher_SecKey jarg2_);
  public final static native long cipher_SecKeys_data_get(long jarg1, cipher_SecKeys jarg1_);
  public final static native void cipher_SecKeys_count_set(long jarg1, cipher_SecKeys jarg1_, int jarg2);
  public final static native int cipher_SecKeys_count_get(long jarg1, cipher_SecKeys jarg1_);
  public final static native long new_cipher_SecKeys();
  public final static native void delete_cipher_SecKeys(long jarg1);
  public final static native long cipher_PubKeys_getAt(long jarg1, cipher_PubKeys jarg1_, int jarg2);
  public final static native int cipher_PubKeys_setAt(long jarg1, cipher_PubKeys jarg1_, int jarg2, long jarg3, cipher_PubKey jarg3_);
  public final static native int cipher_PubKeys_isEqual(long jarg1, cipher_PubKeys jarg1_, long jarg2, cipher_PubKeys jarg2_);
  public final static native void cipher_PubKeys_allocate(long jarg1, cipher_PubKeys jarg1_, int jarg2);
  public final static native void cipher_PubKeys_release(long jarg1, cipher_PubKeys jarg1_);
  public final static native void cipher_PubKeys_data_set(long jarg1, cipher_PubKeys jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native long cipher_PubKeys_data_get(long jarg1, cipher_PubKeys jarg1_);
  public final static native void cipher_PubKeys_count_set(long jarg1, cipher_PubKeys jarg1_, int jarg2);
  public final static native int cipher_PubKeys_count_get(long jarg1, cipher_PubKeys jarg1_);
  public final static native long new_cipher_PubKeys();
  public final static native void delete_cipher_PubKeys(long jarg1);
  public final static native long cipher_SHA256s_getAt(long jarg1, cipher_SHA256s jarg1_, int jarg2);
  public final static native int cipher_SHA256s_setAt(long jarg1, cipher_SHA256s jarg1_, int jarg2, long jarg3, cipher_SHA256 jarg3_);
  public final static native int cipher_SHA256s_isEqual(long jarg1, cipher_SHA256s jarg1_, long jarg2, cipher_SHA256s jarg2_);
  public final static native void cipher_SHA256s_allocate(long jarg1, cipher_SHA256s jarg1_, int jarg2);
  public final static native void cipher_SHA256s_release(long jarg1, cipher_SHA256s jarg1_);
  public final static native void cipher_SHA256s_data_set(long jarg1, cipher_SHA256s jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long cipher_SHA256s_data_get(long jarg1, cipher_SHA256s jarg1_);
  public final static native void cipher_SHA256s_count_set(long jarg1, cipher_SHA256s jarg1_, int jarg2);
  public final static native int cipher_SHA256s_count_get(long jarg1, cipher_SHA256s jarg1_);
  public final static native long new_cipher_SHA256s();
  public final static native void delete_cipher_SHA256s(long jarg1);
  public final static native long coin_UxOutArray_getAt(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native int coin_UxOutArray_setAt(long jarg1, coin_UxOutArray jarg1_, int jarg2, long jarg3, coin__UxOut jarg3_);
  public final static native int coin_UxOutArray_isEqual(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin_UxOutArray jarg2_);
  public final static native void coin_UxOutArray_allocate(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native void coin_UxOutArray_append(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin__UxOut jarg2_);
  public final static native void coin_UxOutArray_release(long jarg1, coin_UxOutArray jarg1_);
  public final static native void coin_UxOutArray_data_set(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin__UxOut jarg2_);
  public final static native long coin_UxOutArray_data_get(long jarg1, coin_UxOutArray jarg1_);
  public final static native void coin_UxOutArray_count_set(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native int coin_UxOutArray_count_get(long jarg1, coin_UxOutArray jarg1_);
  public final static native long new_coin_UxOutArray();
  public final static native void delete_coin_UxOutArray(long jarg1);
  public final static native long cipher_Addresses_getAt(long jarg1, cipher_Addresses jarg1_, int jarg2);
  public final static native int cipher_Addresses_setAt(long jarg1, cipher_Addresses jarg1_, int jarg2, long jarg3, cipher_Addresses jarg3_);
  public final static native int cipher_Addresses_isEqual(long jarg1, cipher_Addresses jarg1_, long jarg2, cipher_Addresses jarg2_);
  public final static native void cipher_Addresses_allocate(long jarg1, cipher_Addresses jarg1_, int jarg2);
  public final static native void cipher_Addresses_release(long jarg1, cipher_Addresses jarg1_);
  public final static native void cipher_Addresses_data_set(long jarg1, cipher_Addresses jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long cipher_Addresses_data_get(long jarg1, cipher_Addresses jarg1_);
  public final static native void cipher_Addresses_count_set(long jarg1, cipher_Addresses jarg1_, int jarg2);
  public final static native int cipher_Addresses_count_get(long jarg1, cipher_Addresses jarg1_);
  public final static native long new_cipher_Addresses();
  public final static native void delete_cipher_Addresses(long jarg1);
  public final static native void FeeCalculator__callback_set(long jarg1, FeeCalculator_ jarg1_, long jarg2);
  public final static native long FeeCalculator__callback_get(long jarg1, FeeCalculator_ jarg1_);
  public final static native void FeeCalculator__context_set(long jarg1, FeeCalculator_ jarg1_, long jarg2);
  public final static native long FeeCalculator__context_get(long jarg1, FeeCalculator_ jarg1_);
  public final static native long new_FeeCalculator_();
  public final static native void delete_FeeCalculator_(long jarg1);
  public final static native int _GoString__SetString(long jarg1, _GoString_ jarg1_, String jarg2);
  public final static native void _GoString__p_set(long jarg1, _GoString_ jarg1_, String jarg2);
  public final static native String _GoString__p_get(long jarg1, _GoString_ jarg1_);
  public final static native void _GoString__n_set(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long _GoString__n_get(long jarg1, _GoString_ jarg1_);
  public final static native long new__GoString_();
  public final static native void delete__GoString_(long jarg1);
  public final static native void GoInterface_t_set(long jarg1, GoInterface jarg1_, long jarg2);
  public final static native long GoInterface_t_get(long jarg1, GoInterface jarg1_);
  public final static native void GoInterface_v_set(long jarg1, GoInterface jarg1_, long jarg2);
  public final static native long GoInterface_v_get(long jarg1, GoInterface jarg1_);
  public final static native long new_GoInterface();
  public final static native void delete_GoInterface(long jarg1);
  public final static native int GoSlice_isEqual(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_);
  public final static native void GoSlice_convertString(long jarg1, GoSlice jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native void GoSlice_setAtChar(long jarg1, GoSlice jarg1_, char jarg2, java.math.BigInteger jarg3);
  public final static native void GoSlice_getString(long jarg1, GoSlice jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native void GoSlice_data_set(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long GoSlice_data_get(long jarg1, GoSlice jarg1_);
  public final static native void GoSlice_len_set(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long GoSlice_len_get(long jarg1, GoSlice jarg1_);
  public final static native void GoSlice_cap_set(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long GoSlice_cap_get(long jarg1, GoSlice jarg1_);
  public final static native long new_GoSlice();
  public final static native void delete_GoSlice(long jarg1);
  public final static native long SKY_coin_NewBlock__SWIG_1(long jarg1, java.math.BigInteger jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_coin_SignedBlock_VerifySignature(long jarg1, coin__SignedBlock jarg1_, long jarg2);
  public final static native long SKY_coin_NewGenesisBlock(long jarg1, cipher__Address jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_coin_Block_HashHeader__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_PreHashHeader__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_Time(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_Seq(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_HashBody__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_String(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_GetTransaction(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_NewBlockHeader(long jarg1, coin__BlockHeader jarg1_, long jarg2, java.math.BigInteger jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, coin__BlockHeader jarg6_);
  public final static native long SKY_coin_BlockHeader_Hash__SWIG_1(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long SKY_coin_BlockHeader_Bytes(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long SKY_coin_BlockHeader_String(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long SKY_coin_BlockBody_Hash__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_BlockBody_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_BlockBody_Bytes(long jarg1, long jarg2);
  public final static native long SKY_coin_CreateUnspents__SWIG_1(long jarg1, coin__BlockHeader jarg1_, long jarg2, long jarg3);
  public final static native long SKY_coin_CreateUnspent(long jarg1, coin__BlockHeader jarg1_, long jarg2, long jarg3, long jarg4, coin__UxOut jarg4_);
  public final static native long SKY_coin_GetBlockObject(long jarg1, long jarg2);
  public final static native long SKY_coin_GetBlockBody(long jarg1, long jarg2);
  public final static native long SKY_coin_NewEmptyBlock(long jarg1, long jarg2);
  public final static native long SKY_bip39_NewDefaultMnemomic(long jarg1);
  public final static native long SKY_bip39_NewEntropy(long jarg1, long jarg2);
  public final static native long SKY_bip39_NewMnemonic(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_bip39_MnemonicToByteArray(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_bip39_IsMnemonicValid(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_api_NewClient(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_api_Client_CSRF(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Version(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Outputs(long jarg1, long jarg2);
  public final static native long SKY_api_Client_OutputsForAddresses(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_OutputsForHashes(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_CoinSupply(long jarg1, long jarg2);
  public final static native long SKY_api_Client_BlockByHash(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_BlockBySeq(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_api_Client_Blocks(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_LastBlocks(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_api_Client_BlockchainMetadata(long jarg1, long jarg2);
  public final static native long SKY_api_Client_BlockchainProgress(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Balance(long jarg1, long jarg2, GoSlice jarg2_, long jarg3, wallet__BalancePair jarg3_);
  public final static native long SKY_api_Client_UxOut(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_AddressUxOuts(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Wallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Wallets(long jarg1, long jarg2);
  public final static native long SKY_api_Client_CreateUnencryptedWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, long jarg5);
  public final static native long SKY_api_Client_CreateEncryptedWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, _GoString_ jarg4_, long jarg5, long jarg6);
  public final static native long SKY_api_Client_NewWalletAddress(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, long jarg4, _GoString_ jarg4_, long jarg5);
  public final static native long SKY_api_Client_WalletBalance(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, wallet__BalancePair jarg3_);
  public final static native long SKY_api_Client_Spend(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, java.math.BigInteger jarg4, long jarg5, _GoString_ jarg5_, long jarg6);
  public final static native long SKY_api_Client_CreateTransaction(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Client_UpdateWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_);
  public final static native long SKY_api_Client_WalletFolderName(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NewSeed(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Client_WalletSeed(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_api_Client_NetworkConnection(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_NetworkConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NetworkDefaultConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NetworkTrustedConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NetworkExchangeableConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_PendingTransactions(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Transaction(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Transactions(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_ConfirmedTransactions(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_UnconfirmedTransactions(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_InjectTransaction(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Client_ResendUnconfirmedTransactions(long jarg1, long jarg2);
  public final static native long SKY_api_Client_RawTransaction(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_AddressTransactions(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Richlist(long jarg1, long jarg2, api__RichlistParams jarg2_, long jarg3);
  public final static native long SKY_api_Client_AddressCount(long jarg1, long jarg2);
  public final static native long SKY_api_Client_UnloadWallet(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_api_Client_Health(long jarg1, long jarg2);
  public final static native long SKY_api_Client_EncryptWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_api_Client_DecryptWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_secp256k1go_XY_Print(long jarg1, secp256k1go__XY jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_XY_ParsePubkey(long jarg1, secp256k1go__XY jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_XY_Bytes(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XY_BytesUncompressed(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XY_SetXY(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3, secp256k1go__Field jarg3_);
  public final static native long SKY_secp256k1go_XY_IsValid(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XY_SetXYZ(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__XYZ jarg2_);
  public final static native long SKY_secp256k1go_XY_Neg(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__XY jarg2_);
  public final static native long SKY_secp256k1go_XY_SetXO(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_, short jarg3);
  public final static native long SKY_secp256k1go_XY_AddXY(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__XY jarg2_);
  public final static native long SKY_secp256k1go_XY_GetPublicKey(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_api_NewWalletResponse(long jarg1, long jarg2);
  public final static native long SKY_api_NewCreateTransactionResponse(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_NewCreatedTransaction(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_CreatedTransaction_ToTransaction(long jarg1, long jarg2);
  public final static native long SKY_api_NewCreatedTransactionOutput(long jarg1, coin__TransactionOutput jarg1_, long jarg2, long jarg3);
  public final static native long SKY_api_NewCreatedTransactionInput(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long SKY_wallet_NewError(long jarg1, GoInterface jarg1_);
  public final static native long SKY_wallet_NewWallet(long jarg1, _GoString_ jarg1_, long jarg2, long jarg3);
  public final static native long SKY_wallet_Wallet_Lock(long jarg1, long jarg2, GoSlice jarg2_, long jarg3, _GoString_ jarg3_);
  public final static native long SKY_wallet_Wallet_Unlock(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_wallet_Load(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_wallet_Wallet_Save(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_wallet_Wallet_Validate(long jarg1);
  public final static native long SKY_wallet_Wallet_Type(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_Version(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_Filename(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_Label(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_IsEncrypted(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_GenerateAddresses(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_wallet_Wallet_GetAddresses(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_GetEntry(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3, wallet__Entry jarg3_, long jarg4);
  public final static native long SKY_wallet_Wallet_AddEntry(long jarg1, long jarg2, wallet__Entry jarg2_);
  public final static native long SKY_wallet_DistributeSpendHours(java.math.BigInteger jarg1, java.math.BigInteger jarg2, short jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_wallet_DistributeCoinHoursProportional(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_wallet_NewUxBalances(java.math.BigInteger jarg1, long jarg2, long jarg3);
  public final static native long SKY_wallet_NewUxBalance(java.math.BigInteger jarg1, long jarg2, coin__UxOut jarg2_, long jarg3, wallet__UxBalance jarg3_);
  public final static native long SKY_wallet_ChooseSpendsMinimizeUxOuts(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_wallet_ChooseSpendsMaximizeUxOuts(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_cli_CheckWalletBalance(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_cli_GetBalanceOfAddresses(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_wallet_NewReadableEntry(long jarg1, _GoString_ jarg1_, long jarg2, wallet__Entry jarg2_, long jarg3);
  public final static native long SKY_wallet_LoadReadableWallet(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_wallet_ReadableWallet_Save(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_wallet_ReadableWallet_Load(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_wallet_ReadableWallet_Erase(long jarg1);
  public final static native long SKY_secp256k1go_DecompressPoint(long jarg1, GoSlice jarg1_, short jarg2, long jarg3, GoSlice jarg3_);
  public final static native long SKY_secp256k1go_RecoverPublicKey(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long SKY_secp256k1go_Multiply(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_BaseMultiply(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_BaseMultiplyAdd(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_GeneratePublicKey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_SeckeyIsValid(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_PubkeyIsValid(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_base58_String2Hex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_ToInt(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_ToHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_Base582Int(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base582Hex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_BitHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Int2Base58(long jarg1, long jarg2);
  public final static native long SKY_base58_Hex2Base58(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_base58_Hex2Base58String(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_base58_Hex2Base58Str(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cli_GenerateWallet(long jarg1, _GoString_ jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_cli_MakeAlphanumericSeed(long jarg1);
  public final static native long SKY_webrpc_NewClient(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_webrpc_Client_CSRF(long jarg1, long jarg2);
  public final static native long SKY_webrpc_Client_InjectTransaction(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_webrpc_Client_GetStatus(long jarg1, long jarg2);
  public final static native long SKY_webrpc_Client_GetTransactionByID(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_webrpc_Client_GetAddressUxOuts(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_webrpc_Client_GetBlocksInRange(long jarg1, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_webrpc_Client_GetBlocksBySeq(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_webrpc_Client_GetLastBlocks(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_iputil_LocalhostIP(long jarg1);
  public final static native long SKY_iputil_IsLocalhost(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_iputil_SplitAddr(long jarg1, _GoString_ jarg1_, long jarg2, long jarg3);
  public final static native long SKY_secp256k1_SumSHA256(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_RandByte(long jarg1, long jarg2);
  public final static native long SKY_cli_GenerateAddressesInFile(long jarg1, _GoString_ jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native long SKY_cli_FormatAddressesAsJSON(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cli_FormatAddressesAsJoinedArray(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cli_AddressesToStrings(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_coin_AddUint64(java.math.BigInteger jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_Uint64ToInt64(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_coin_Int64ToUint64(long jarg1, long jarg2);
  public final static native long SKY_cipher_RandByte(long jarg1, long jarg2);
  public final static native long SKY_cipher_NewPubKey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_PubKeyFromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_PubKeyFromSecKey(long jarg1, long jarg2);
  public final static native long SKY_cipher_PubKeyFromSig__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_PubKey_Verify(long jarg1);
  public final static native long SKY_cipher_PubKey_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_PubKeyRipemd160(long jarg1, long jarg2);
  public final static native long SKY_cipher_NewSecKey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SecKeyFromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_SecKey_Verify(long jarg1);
  public final static native long SKY_cipher_SecKey_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_ECDH(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_NewSig(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SigFromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_Sig_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_SignHash__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_VerifyAddressSignedHash(long jarg1, cipher__Address jarg1_, long jarg2, long jarg3);
  public final static native long SKY_cipher_VerifySignedHash(long jarg1, long jarg2);
  public final static native long SKY_cipher_VerifyPubKeySignedHash(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_GenerateKeyPair(long jarg1, long jarg2);
  public final static native long SKY_cipher_GenerateDeterministicKeyPair(long jarg1, GoSlice jarg1_, long jarg2, long jarg3);
  public final static native long SKY_cipher_DeterministicKeyPairIterator(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_cipher_GenerateDeterministicKeyPairs__SWIG_1(long jarg1, GoSlice jarg1_, long jarg2, long jarg3);
  public final static native long SKY_cipher_GenerateDeterministicKeyPairsSeed__SWIG_1(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_cipher_CheckSecKey(long jarg1);
  public final static native long SKY_cipher_CheckSecKeyHash__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Signature_Create(long jarg1);
  public final static native long SKY_secp256k1go_Signature_GetR(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Signature_GetS(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Signature_Print(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Signature_Verify(long jarg1, long jarg2, secp256k1go__XY jarg2_, long jarg3, long jarg4);
  public final static native long SKY_secp256k1go_Signature_Recover(long jarg1, long jarg2, secp256k1go__XY jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long SKY_secp256k1go_Signature_Sign(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_secp256k1go_Signature_ParseBytes(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Signature_Bytes(long jarg1, long jarg2);
  public final static native long SKY_cli_App_Run(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_cli_Config_GetCoin(long jarg1, long jarg2);
  public final static native long SKY_cli_Config_GetRPCAddress(long jarg1, long jarg2);
  public final static native long SKY_cli_RPCClientFromApp(long jarg1, long jarg2);
  public final static native long SKY_cli_Getenv(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cli_Setenv(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_poly1305_Verify(long jarg1, long jarg2, GoSlice jarg2_, long jarg3, long jarg4);
  public final static native long SKY_wallet_NewBalance(java.math.BigInteger jarg1, java.math.BigInteger jarg2, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_NewBalanceFromUxOut(java.math.BigInteger jarg1, long jarg2, coin__UxOut jarg2_, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_Balance_Add(long jarg1, wallet__Balance jarg1_, long jarg2, wallet__Balance jarg2_, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_Balance_Sub(long jarg1, wallet__Balance jarg1_, long jarg2, wallet__Balance jarg2_, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_Balance_Equals(long jarg1, wallet__Balance jarg1_, long jarg2, wallet__Balance jarg2_, long jarg3);
  public final static native long SKY_wallet_Balance_IsZero(long jarg1, wallet__Balance jarg1_, long jarg2);
  public final static native long SKY_httphelper_Address_UnmarshalJSON(long jarg1, httphelper__Address jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_httphelper_Address_MarshalJSON(long jarg1, httphelper__Address jarg1_, long jarg2);
  public final static native long SKY_httphelper_Coins_UnmarshalJSON(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_httphelper_Coins_MarshalJSON(long jarg1, long jarg2);
  public final static native long SKY_httphelper_Coins_Value(long jarg1, long jarg2);
  public final static native long SKY_httphelper_Hours_UnmarshalJSON(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_httphelper_Hours_MarshalJSON(long jarg1, long jarg2);
  public final static native long SKY_httphelper_Hours_Value(long jarg1, long jarg2);
  public final static native long SKY_wallet_Entry_Verify(long jarg1, wallet__Entry jarg1_);
  public final static native long SKY_wallet_Entry_VerifyPublic(long jarg1, wallet__Entry jarg1_);
  public final static native long SKY_secp256k1go_XYZ_Print(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_XYZ_SetXY(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XY jarg2_);
  public final static native long SKY_secp256k1go_XYZ_IsInfinity(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XYZ_IsValid(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XYZ_Normalize(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native long SKY_secp256k1go_XYZ_Equals(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_XYZ_ECmult(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3, long jarg4);
  public final static native long SKY_secp256k1go_XYZ_Neg(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_);
  public final static native long SKY_secp256k1go_XYZ_Double(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_);
  public final static native long SKY_secp256k1go_XYZ_AddXY(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3, secp256k1go__XY jarg3_);
  public final static native long SKY_secp256k1go_XYZ_Add(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3, secp256k1go__XYZ jarg3_);
  public final static native long SKY_secp256k1go_ECmultGen(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long SKY_droplet_FromString(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_droplet_ToString(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_wallet_CryptoTypeFromString(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_handle_copy(long jarg1, long jarg2);
  public final static native long SKY_logging_EnableColors();
  public final static native long SKY_logging_DisableColors();
  public final static native long SKY_logging_Disable();
  public final static native long SKY_map_Get(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native short SKY_map_HasKey(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_map_Close(long jarg1);
  public final static native long SKY_cipher_DecodeBase58Address(long jarg1, _GoString_ jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_AddressFromBytes(long jarg1, GoSlice jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_AddressFromPubKey(long jarg1, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_AddressFromSecKey(long jarg1, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_Address_Null(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_Bytes(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_Verify(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_String(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_Checksum(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_JsonEncode_Handle(long jarg1, long jarg2);
  public final static native long SKY_Handle_Progress_GetCurrent(long jarg1, long jarg2);
  public final static native long SKY_Handle_Block_GetHeadSeq(long jarg1, long jarg2);
  public final static native long SKY_Handle_Block_GetHeadHash(long jarg1, long jarg2);
  public final static native long SKY_Handle_Block_GetPreviousBlockHash(long jarg1, long jarg2);
  public final static native long SKY_Handle_Blocks_GetAt(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_Handle_Blocks_GetCount(long jarg1, long jarg2);
  public final static native long SKY_Handle_Connections_GetCount(long jarg1, long jarg2);
  public final static native long SKY_Handle_Strings_GetCount(long jarg1, long jarg2);
  public final static native long SKY_Handle_Strings_Sort(long jarg1);
  public final static native long SKY_Handle_Strings_GetAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Handle_Client_GetWalletDir(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletFileName(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletLabel(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletFullPath(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Handle_GetWalletMeta(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetWalletEntriesCount(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletResponseEntriesCount(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletGetEntry(long jarg1, long jarg2, long jarg3, cipher__Address jarg3_, long jarg4);
  public final static native long SKY_api_Handle_WalletResponseGetEntry(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_api_Handle_WalletResponseIsEncrypted(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletResponseGetCryptoType(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletsResponseGetCount(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletsResponseGetAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Handle_GetWalletFolderAddress(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetWalletSeed(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetWalletLastSeed(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetBuildInfoData(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_ripemd160_New(long jarg1);
  public final static native long SKY_ripemd160_Write(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_ripemd160_Sum(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_Number_Create(long jarg1);
  public final static native long SKY_secp256k1go_Number_Print(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Number_SetHex(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Number_IsOdd(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Number_IsEqual(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_UxOut_Hash__SWIG_1(long jarg1, coin__UxOut jarg1_, long jarg2);
  public final static native long SKY_coin_UxOut_SnapshotHash__SWIG_1(long jarg1, coin__UxOut jarg1_, long jarg2);
  public final static native long SKY_coin_UxBody_Hash__SWIG_1(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long SKY_coin_UxOut_CoinHours(long jarg1, coin__UxOut jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Hashes__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_HasDupes__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_Sort(long jarg1);
  public final static native long SKY_coin_UxArray_Len(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_Less__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_UxArray_Swap__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Coins__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_CoinHours__SWIG_1(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Sub__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Add__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_NewAddressUxOuts__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Keys__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Flatten__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Sub(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_Add(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_Get__SWIG_1(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_HasKey(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_GetOutputLength(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_Length(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Set__SWIG_1(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_encrypt_ScryptChacha20poly1305_Encrypt(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_encrypt_ScryptChacha20poly1305_Decrypt(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_wallet_CreateOptionsHandle(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, short jarg4, long jarg5, _GoString_ jarg5_, long jarg6, _GoString_ jarg6_, java.math.BigInteger jarg7, long jarg8);
  public final static native long SKY_cli_AddPrivateKey(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_cli_AddPrivateKeyToFile(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_secp256k1_GenerateKeyPair(long jarg1, long jarg2);
  public final static native long SKY_secp256k1_PubkeyFromSeckey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_UncompressPubkey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_UncompressedPubkeyFromSeckey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_Secp256k1Hash(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_GenerateDeterministicKeyPair(long jarg1, GoSlice jarg1_, long jarg2, long jarg3);
  public final static native long SKY_secp256k1_DeterministicKeyPairIterator(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_secp256k1_Sign(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1_SignDeterministic(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_secp256k1_VerifySeckey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_VerifyPubkey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_VerifySignatureValidity(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_VerifySignature(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_secp256k1_SignatureErrorString(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_secp256k1_RecoverPubkey(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1_ECDH(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_apputil_CatchInterruptPanic();
  public final static native long SKY_apputil_CatchDebug();
  public final static native long SKY_apputil_PrintProgramStatus();
  public final static native long SKY_certutil_NewTLSCertPair(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3, GoSlice jarg3_, long jarg4, long jarg5);
  public final static native long SKY_fee_VerifyTransactionFee(long jarg1, java.math.BigInteger jarg2);
  public final static native long SKY_fee_VerifyTransactionFeeForHours(java.math.BigInteger jarg1, java.math.BigInteger jarg2);
  public final static native long SKY_fee_RequiredFee(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_fee_RemainingHours(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_fee_TransactionFee__SWIG_1(long jarg1, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native long SKY_cli_LoadConfig(long jarg1);
  public final static native long SKY_cli_Config_FullWalletPath(long jarg1, long jarg2);
  public final static native long SKY_cli_Config_FullDBPath(long jarg1, long jarg2);
  public final static native long SKY_cli_NewApp(long jarg1, long jarg2);
  public final static native long SKY_cli_RPCClientFromContext(long jarg1, long jarg2);
  public final static native long SKY_cli_ConfigFromContext(long jarg1, long jarg2);
  public final static native long SKY_cli_PasswordFromBytes_Password(long jarg1, long jarg2);
  public final static native long SKY_cli_PasswordFromTerm_Password(long jarg1);
  public final static native long SKY_cli_CreateRawTxFromWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, GoSlice jarg4_, long jarg5, long jarg6);
  public final static native long SKY_cli_CreateRawTxFromAddress(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, _GoString_ jarg4_, long jarg5, GoSlice jarg5_, long jarg6, long jarg7);
  public final static native long SKY_cli_CreateRawTx(long jarg1, long jarg2, long jarg3, GoSlice jarg3_, long jarg4, _GoString_ jarg4_, long jarg5, GoSlice jarg5_, long jarg6, GoSlice jarg6_, long jarg7);
  public final static native long SKY_cli_NewTransaction(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_file_InitDataDir(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_file_UserHome(long jarg1);
  public final static native long SKY_file_ResolveResourceDirectory(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_file_DetermineResourcePath(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_cipher_DecodeBase58BitcoinAddress(long jarg1, _GoString_ jarg1_, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native void SKY_cipher_BitcoinAddressFromPubKey(long jarg1, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native long SKY_cipher_BitcoinAddressFromSecKey(long jarg1, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native void SKY_cipher_BitcoinWalletImportFormatFromSeckey(long jarg1, long jarg2);
  public final static native long SKY_cipher_BitcoinAddressFromBytes(long jarg1, GoSlice jarg1_, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native long SKY_cipher_SecKeyFromBitcoinWalletImportFormat(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native short SKY_cipher_BitcoinAddress_Null(long jarg1, cipher__BitcoinAddress jarg1_);
  public final static native void SKY_cipher_BitcoinAddress_Bytes(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long SKY_cipher_BitcoinAddress_Verify(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native void SKY_cipher_BitcoinAddress_String(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native void SKY_cipher_BitcoinAddress_Checksum(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long SKY_cli_GetWalletOutputsFromFile(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_cli_GetWalletOutputs(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_testutil_MakeAddress(long jarg1, cipher__Address jarg1_);
  public final static native long SKY_secp256k1go_Field_String(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_Print(long jarg1, secp256k1go__Field jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Field_SetB32(long jarg1, secp256k1go__Field jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Field_SetBytes(long jarg1, secp256k1go__Field jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Field_SetHex(long jarg1, secp256k1go__Field jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Field_IsOdd(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_IsZero(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_SetInt(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_Normalize(long jarg1, secp256k1go__Field jarg1_);
  public final static native long SKY_secp256k1go_Field_GetB32(long jarg1, secp256k1go__Field jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Field_Equals(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_Field_SetAdd(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_MulInt(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_Negate(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_Field_Inv(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_Sqrt(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_InvVar(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_Mul(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3, secp256k1go__Field jarg3_);
  public final static native long SKY_secp256k1go_Field_Sqr(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_scrypt_Key(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native long SKY_cipher_Ripemd160_Set(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_cipher_HashRipemd160(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256_Set__SWIG_1(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_cipher_SHA256_Hex__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_cipher_SHA256_Xor(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_SumSHA256__SWIG_1(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256FromHex__SWIG_1(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_DoubleSHA256(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_AddSHA256__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_Merkle(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256_Null(long jarg1, long jarg2);
  public final static native long SKY_coin_Create_Transaction(long jarg1);
  public final static native long SKY_coin_Transaction_Copy(long jarg1, long jarg2);
  public final static native long SKY_coin_GetTransactionObject__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_ResetInputs(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetInputsCount(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetInputAt__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_SetInputAt__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_GetOutputsCount(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetOutputAt(long jarg1, long jarg2, long jarg3, coin__TransactionOutput jarg3_);
  public final static native long SKY_coin_Transaction_SetOutputAt(long jarg1, long jarg2, long jarg3, coin__TransactionOutput jarg3_);
  public final static native long SKY_coin_Transaction_GetSignaturesCount(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetSignatureAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_SetSignatureAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_PushSignature(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_ResetOutputs(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_ResetSignatures(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_Verify(long jarg1);
  public final static native long SKY_coin_Transaction_VerifyInput__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_PushInput__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_TransactionOutput_UxID(long jarg1, coin__TransactionOutput jarg1_, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_PushOutput(long jarg1, long jarg2, cipher__Address jarg2_, java.math.BigInteger jarg3, java.math.BigInteger jarg4);
  public final static native long SKY_coin_Transaction_SignInputs__SWIG_1(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_coin_Transaction_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_Hash__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_SizeHash(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_TxID(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_TxIDHex(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_UpdateHeader(long jarg1);
  public final static native long SKY_coin_Transaction_HashInner__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_Serialize(long jarg1, long jarg2);
  public final static native long SKY_coin_TransactionDeserialize(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_coin_Transaction_OutputHours(long jarg1, long jarg2);
  public final static native long SKY_coin_Create_Transactions(long jarg1);
  public final static native long SKY_coin_GetTransactionsObject(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Length(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Add(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Fees(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transactions_GetAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transactions_Hashes__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_TruncateBytesTo(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_SortTransactions(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_NewSortableTransactions(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_SortableTransactions_Sort(long jarg1);
  public final static native long SKY_coin_SortableTransactions_Len(long jarg1, long jarg2);
  public final static native long SKY_coin_SortableTransactions_Less(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_SortableTransactions_Swap(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_VerifyTransactionCoinsSpending__SWIG_1(long jarg1, long jarg2);
  public final static native long SKY_coin_VerifyTransactionHoursSpending__SWIG_1(java.math.BigInteger jarg1, long jarg2, long jarg3);
  public final static native void api__RichlistParams_N_set(long jarg1, api__RichlistParams jarg1_, long jarg2);
  public final static native long api__RichlistParams_N_get(long jarg1, api__RichlistParams jarg1_);
  public final static native void api__RichlistParams_IncludeDistribution_set(long jarg1, api__RichlistParams jarg1_, long jarg2);
  public final static native long api__RichlistParams_IncludeDistribution_get(long jarg1, api__RichlistParams jarg1_);
  public final static native long new_api__RichlistParams();
  public final static native void delete_api__RichlistParams(long jarg1);
  public final static native int cipher__Address_isEqual(long jarg1, cipher__Address jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native void cipher__Address_Version_set(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long cipher__Address_Version_get(long jarg1, cipher__Address jarg1_);
  public final static native void cipher__Address_Key_set(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long cipher__Address_Key_get(long jarg1, cipher__Address jarg1_);
  public final static native long new_cipher__Address();
  public final static native void delete_cipher__Address(long jarg1);
  public final static native int cipher__BitcoinAddress_isEqual(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native void cipher__BitcoinAddress_Version_set(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long cipher__BitcoinAddress_Version_get(long jarg1, cipher__BitcoinAddress jarg1_);
  public final static native void cipher__BitcoinAddress_Key_set(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long cipher__BitcoinAddress_Key_get(long jarg1, cipher__BitcoinAddress jarg1_);
  public final static native long new_cipher__BitcoinAddress();
  public final static native void delete_cipher__BitcoinAddress(long jarg1);
  public final static native void encrypt__ScryptChacha20poly1305_N_set(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long encrypt__ScryptChacha20poly1305_N_get(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native void encrypt__ScryptChacha20poly1305_R_set(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long encrypt__ScryptChacha20poly1305_R_get(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native void encrypt__ScryptChacha20poly1305_P_set(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long encrypt__ScryptChacha20poly1305_P_get(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native void encrypt__ScryptChacha20poly1305_KeyLen_set(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long encrypt__ScryptChacha20poly1305_KeyLen_get(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native long new_encrypt__ScryptChacha20poly1305();
  public final static native void delete_encrypt__ScryptChacha20poly1305(long jarg1);
  public final static native void secp256k1go__Field_n_set(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long secp256k1go__Field_n_get(long jarg1, secp256k1go__Field jarg1_);
  public final static native long new_secp256k1go__Field();
  public final static native void delete_secp256k1go__Field(long jarg1);
  public final static native void secp256k1go__XY_X_set(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long secp256k1go__XY_X_get(long jarg1, secp256k1go__XY jarg1_);
  public final static native void secp256k1go__XY_Y_set(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long secp256k1go__XY_Y_get(long jarg1, secp256k1go__XY jarg1_);
  public final static native void secp256k1go__XY_Infinity_set(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long secp256k1go__XY_Infinity_get(long jarg1, secp256k1go__XY jarg1_);
  public final static native long new_secp256k1go__XY();
  public final static native void delete_secp256k1go__XY(long jarg1);
  public final static native void secp256k1go__XYZ_X_set(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long secp256k1go__XYZ_X_get(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native void secp256k1go__XYZ_Y_set(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long secp256k1go__XYZ_Y_get(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native void secp256k1go__XYZ_Z_set(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long secp256k1go__XYZ_Z_get(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native void secp256k1go__XYZ_Infinity_set(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long secp256k1go__XYZ_Infinity_get(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native long new_secp256k1go__XYZ();
  public final static native void delete_secp256k1go__XYZ(long jarg1);
  public final static native void cli__SendAmount_Addr_set(long jarg1, cli__SendAmount jarg1_, long jarg2);
  public final static native long cli__SendAmount_Addr_get(long jarg1, cli__SendAmount jarg1_);
  public final static native void cli__SendAmount_Coins_set(long jarg1, cli__SendAmount jarg1_, long jarg2);
  public final static native long cli__SendAmount_Coins_get(long jarg1, cli__SendAmount jarg1_);
  public final static native long new_cli__SendAmount();
  public final static native void delete_cli__SendAmount(long jarg1);
  public final static native int coin__Transaction_isEqual(long jarg1, coin__Transaction jarg1_, long jarg2, coin__Transaction jarg2_);
  public final static native int coin__Transaction_setInnerHash(long jarg1, coin__Transaction jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void coin__Transaction_Length_set(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long coin__Transaction_Length_get(long jarg1, coin__Transaction jarg1_);
  public final static native void coin__Transaction_Type_set(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long coin__Transaction_Type_get(long jarg1, coin__Transaction jarg1_);
  public final static native void coin__Transaction_InnerHash_set(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long coin__Transaction_InnerHash_get(long jarg1, coin__Transaction jarg1_);
  public final static native void coin__Transaction_Sigs_set(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long coin__Transaction_Sigs_get(long jarg1, coin__Transaction jarg1_);
  public final static native void coin__Transaction_In_set(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long coin__Transaction_In_get(long jarg1, coin__Transaction jarg1_);
  public final static native void coin__Transaction_Out_set(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long coin__Transaction_Out_get(long jarg1, coin__Transaction jarg1_);
  public final static native long new_coin__Transaction();
  public final static native void delete_coin__Transaction(long jarg1);
  public final static native int coin__TransactionOutput_isEqual(long jarg1, coin__TransactionOutput jarg1_, long jarg2, coin__TransactionOutput jarg2_);
  public final static native void coin__TransactionOutput_Address_set(long jarg1, coin__TransactionOutput jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long coin__TransactionOutput_Address_get(long jarg1, coin__TransactionOutput jarg1_);
  public final static native void coin__TransactionOutput_Coins_set(long jarg1, coin__TransactionOutput jarg1_, long jarg2);
  public final static native long coin__TransactionOutput_Coins_get(long jarg1, coin__TransactionOutput jarg1_);
  public final static native void coin__TransactionOutput_Hours_set(long jarg1, coin__TransactionOutput jarg1_, long jarg2);
  public final static native long coin__TransactionOutput_Hours_get(long jarg1, coin__TransactionOutput jarg1_);
  public final static native long new_coin__TransactionOutput();
  public final static native void delete_coin__TransactionOutput(long jarg1);
  public final static native int coin__BlockHeader_isEqual(long jarg1, coin__BlockHeader jarg1_, long jarg2, coin__BlockHeader jarg2_);
  public final static native void coin__BlockHeader_Version_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_Version_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native void coin__BlockHeader_Time_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_Time_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native void coin__BlockHeader_BkSeq_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_BkSeq_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native void coin__BlockHeader_Fee_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_Fee_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native void coin__BlockHeader_PrevHash_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_PrevHash_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native void coin__BlockHeader_BodyHash_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_BodyHash_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native void coin__BlockHeader_UxHash_set(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long coin__BlockHeader_UxHash_get(long jarg1, coin__BlockHeader jarg1_);
  public final static native long new_coin__BlockHeader();
  public final static native void delete_coin__BlockHeader(long jarg1);
  public final static native int coin__BlockBody_isEqual(long jarg1, coin__BlockBody jarg1_, long jarg2, coin__BlockBody jarg2_);
  public final static native void coin__BlockBody_Transactions_set(long jarg1, coin__BlockBody jarg1_, long jarg2);
  public final static native long coin__BlockBody_Transactions_get(long jarg1, coin__BlockBody jarg1_);
  public final static native long new_coin__BlockBody();
  public final static native void delete_coin__BlockBody(long jarg1);
  public final static native void coin__Block_Head_set(long jarg1, coin__Block jarg1_, long jarg2, coin__BlockHeader jarg2_);
  public final static native long coin__Block_Head_get(long jarg1, coin__Block jarg1_);
  public final static native void coin__Block_Body_set(long jarg1, coin__Block jarg1_, long jarg2, coin__BlockBody jarg2_);
  public final static native long coin__Block_Body_get(long jarg1, coin__Block jarg1_);
  public final static native long new_coin__Block();
  public final static native void delete_coin__Block(long jarg1);
  public final static native void coin__SignedBlock__unnamed_set(long jarg1, coin__SignedBlock jarg1_, long jarg2, coin__Block jarg2_);
  public final static native long coin__SignedBlock__unnamed_get(long jarg1, coin__SignedBlock jarg1_);
  public final static native void coin__SignedBlock_Sig_set(long jarg1, coin__SignedBlock jarg1_, long jarg2);
  public final static native long coin__SignedBlock_Sig_get(long jarg1, coin__SignedBlock jarg1_);
  public final static native long new_coin__SignedBlock();
  public final static native void delete_coin__SignedBlock(long jarg1);
  public final static native void coin__UxHead_Time_set(long jarg1, coin__UxHead jarg1_, long jarg2);
  public final static native long coin__UxHead_Time_get(long jarg1, coin__UxHead jarg1_);
  public final static native void coin__UxHead_BkSeq_set(long jarg1, coin__UxHead jarg1_, long jarg2);
  public final static native long coin__UxHead_BkSeq_get(long jarg1, coin__UxHead jarg1_);
  public final static native long new_coin__UxHead();
  public final static native void delete_coin__UxHead(long jarg1);
  public final static native void coin__UxBody_SetSrcTransaction(long jarg1, coin__UxBody jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void coin__UxBody_SrcTransaction_set(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long coin__UxBody_SrcTransaction_get(long jarg1, coin__UxBody jarg1_);
  public final static native void coin__UxBody_Address_set(long jarg1, coin__UxBody jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long coin__UxBody_Address_get(long jarg1, coin__UxBody jarg1_);
  public final static native void coin__UxBody_Coins_set(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long coin__UxBody_Coins_get(long jarg1, coin__UxBody jarg1_);
  public final static native void coin__UxBody_Hours_set(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long coin__UxBody_Hours_get(long jarg1, coin__UxBody jarg1_);
  public final static native long new_coin__UxBody();
  public final static native void delete_coin__UxBody(long jarg1);
  public final static native int coin__UxOut_isEqual(long jarg1, coin__UxOut jarg1_, long jarg2, coin__UxOut jarg2_);
  public final static native void coin__UxOut_Head_set(long jarg1, coin__UxOut jarg1_, long jarg2, coin__UxHead jarg2_);
  public final static native long coin__UxOut_Head_get(long jarg1, coin__UxOut jarg1_);
  public final static native void coin__UxOut_Body_set(long jarg1, coin__UxOut jarg1_, long jarg2, coin__UxBody jarg2_);
  public final static native long coin__UxOut_Body_get(long jarg1, coin__UxOut jarg1_);
  public final static native long new_coin__UxOut();
  public final static native void delete_coin__UxOut(long jarg1);
  public final static native void httphelper__Address__unnamed_set(long jarg1, httphelper__Address jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long httphelper__Address__unnamed_get(long jarg1, httphelper__Address jarg1_);
  public final static native long new_httphelper__Address();
  public final static native void delete_httphelper__Address(long jarg1);
  public final static native void wallet__Balance_Coins_set(long jarg1, wallet__Balance jarg1_, long jarg2);
  public final static native long wallet__Balance_Coins_get(long jarg1, wallet__Balance jarg1_);
  public final static native void wallet__Balance_Hours_set(long jarg1, wallet__Balance jarg1_, long jarg2);
  public final static native long wallet__Balance_Hours_get(long jarg1, wallet__Balance jarg1_);
  public final static native long new_wallet__Balance();
  public final static native void delete_wallet__Balance(long jarg1);
  public final static native void wallet__BalancePair_Confirmed_set(long jarg1, wallet__BalancePair jarg1_, long jarg2, wallet__Balance jarg2_);
  public final static native long wallet__BalancePair_Confirmed_get(long jarg1, wallet__BalancePair jarg1_);
  public final static native void wallet__BalancePair_Predicted_set(long jarg1, wallet__BalancePair jarg1_, long jarg2, wallet__Balance jarg2_);
  public final static native long wallet__BalancePair_Predicted_get(long jarg1, wallet__BalancePair jarg1_);
  public final static native long new_wallet__BalancePair();
  public final static native void delete_wallet__BalancePair(long jarg1);
  public final static native void wallet__Entry_Address_set(long jarg1, wallet__Entry jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long wallet__Entry_Address_get(long jarg1, wallet__Entry jarg1_);
  public final static native void wallet__Entry_Public_set(long jarg1, wallet__Entry jarg1_, long jarg2);
  public final static native long wallet__Entry_Public_get(long jarg1, wallet__Entry jarg1_);
  public final static native void wallet__Entry_Secret_set(long jarg1, wallet__Entry jarg1_, long jarg2);
  public final static native long wallet__Entry_Secret_get(long jarg1, wallet__Entry jarg1_);
  public final static native long new_wallet__Entry();
  public final static native void delete_wallet__Entry(long jarg1);
  public final static native void wallet__Note_TxID_set(long jarg1, wallet__Note jarg1_, long jarg2);
  public final static native long wallet__Note_TxID_get(long jarg1, wallet__Note jarg1_);
  public final static native void wallet__Note_Value_set(long jarg1, wallet__Note jarg1_, long jarg2);
  public final static native long wallet__Note_Value_get(long jarg1, wallet__Note jarg1_);
  public final static native long new_wallet__Note();
  public final static native void delete_wallet__Note(long jarg1);
  public final static native void wallet__ReadableNote_TransactionID_set(long jarg1, wallet__ReadableNote jarg1_, long jarg2);
  public final static native long wallet__ReadableNote_TransactionID_get(long jarg1, wallet__ReadableNote jarg1_);
  public final static native void wallet__ReadableNote_ActualNote_set(long jarg1, wallet__ReadableNote jarg1_, long jarg2);
  public final static native long wallet__ReadableNote_ActualNote_get(long jarg1, wallet__ReadableNote jarg1_);
  public final static native long new_wallet__ReadableNote();
  public final static native void delete_wallet__ReadableNote(long jarg1);
  public final static native void wallet__UxBalance_Hash_set(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long wallet__UxBalance_Hash_get(long jarg1, wallet__UxBalance jarg1_);
  public final static native void wallet__UxBalance_BkSeq_set(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long wallet__UxBalance_BkSeq_get(long jarg1, wallet__UxBalance jarg1_);
  public final static native void wallet__UxBalance_Address_set(long jarg1, wallet__UxBalance jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long wallet__UxBalance_Address_get(long jarg1, wallet__UxBalance jarg1_);
  public final static native void wallet__UxBalance_Coins_set(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long wallet__UxBalance_Coins_get(long jarg1, wallet__UxBalance jarg1_);
  public final static native void wallet__UxBalance_Hours_set(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long wallet__UxBalance_Hours_get(long jarg1, wallet__UxBalance jarg1_);
  public final static native long new_wallet__UxBalance();
  public final static native void delete_wallet__UxBalance(long jarg1);
}
