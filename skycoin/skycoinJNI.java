/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class skycoinJNI {
  public final static native void destroy_cipher_SecKeys(long jarg1, cipher_SecKeys jarg1_);
  public final static native int equalSlices(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, int jarg3);
  public final static native int equalTransactions(long jarg1, coin__Transaction jarg1_, long jarg2, coin__Transaction jarg2_);
  public final static native int equalTransactionsArrays(long jarg1, long jarg2);
  public final static native int equalBlockHeaders(long jarg1, coin__BlockHeader jarg1_, long jarg2, coin__BlockHeader jarg2_);
  public final static native int cipher_PubKey_isEqual(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native void cipher_PubKey_assignFrom(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native void cipher_PubKey_assignTo(long jarg1, cipher_PubKey jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native void cipher_PubKey_assignSlice(long jarg1, cipher_PubKey jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long cipher_PubKey_toSlice(long jarg1, cipher_PubKey jarg1_);
  public final static native void set_cipher_PubKey_data(long jarg1, cipher_PubKey jarg1_, long jarg2);
  public final static native long get_cipher_PubKey_data(long jarg1, cipher_PubKey jarg1_);
  public final static native long new_cipher_PubKey();
  public final static native void delete_cipher_PubKey(long jarg1);
  public final static native int cipher_SecKey_isEqual(long jarg1, cipher_SecKey jarg1_, long jarg2, cipher_SecKey jarg2_);
  public final static native void cipher_SecKey_assignFrom(long jarg1, cipher_SecKey jarg1_, long jarg2);
  public final static native void cipher_SecKey_assignTo(long jarg1, cipher_SecKey jarg1_, long jarg2);
  public final static native void set_cipher_SecKey_data(long jarg1, cipher_SecKey jarg1_, long jarg2);
  public final static native long get_cipher_SecKey_data(long jarg1, cipher_SecKey jarg1_);
  public final static native long new_cipher_SecKey();
  public final static native void delete_cipher_SecKey(long jarg1);
  public final static native int cipher_Ripemd160_isEqual(long jarg1, cipher_Ripemd160 jarg1_, long jarg2, cipher_Ripemd160 jarg2_);
  public final static native void cipher_Ripemd160_assignFrom(long jarg1, cipher_Ripemd160 jarg1_, long jarg2);
  public final static native void cipher_Ripemd160_assignTo(long jarg1, cipher_Ripemd160 jarg1_, long jarg2);
  public final static native void set_cipher_Ripemd160_data(long jarg1, cipher_Ripemd160 jarg1_, long jarg2);
  public final static native long get_cipher_Ripemd160_data(long jarg1, cipher_Ripemd160 jarg1_);
  public final static native long new_cipher_Ripemd160();
  public final static native void delete_cipher_Ripemd160(long jarg1);
  public final static native int cipher_Sig_isEqual(long jarg1, cipher_Sig jarg1_, long jarg2, cipher_Sig jarg2_);
  public final static native void cipher_Sig_assignFrom(long jarg1, cipher_Sig jarg1_, long jarg2);
  public final static native void cipher_Sig_assignTo(long jarg1, cipher_Sig jarg1_, long jarg2);
  public final static native void set_cipher_Sig_data(long jarg1, cipher_Sig jarg1_, long jarg2);
  public final static native long get_cipher_Sig_data(long jarg1, cipher_Sig jarg1_);
  public final static native long new_cipher_Sig();
  public final static native void delete_cipher_Sig(long jarg1);
  public final static native int cipher_SHA256_isEqual(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void cipher_SHA256_assignFrom(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void cipher_SHA256_assignTo(long jarg1, cipher_SHA256 jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void set_cipher_SHA256_data(long jarg1, cipher_SHA256 jarg1_, long jarg2);
  public final static native long get_cipher_SHA256_data(long jarg1, cipher_SHA256 jarg1_);
  public final static native long new_cipher_SHA256();
  public final static native void delete_cipher_SHA256(long jarg1);
  public final static native int cipher_Checksum_isEqual(long jarg1, cipher_Checksum jarg1_, long jarg2, cipher_Checksum jarg2_);
  public final static native void cipher_Checksum_assignFrom(long jarg1, cipher_Checksum jarg1_, long jarg2);
  public final static native void cipher_Checksum_assignTo(long jarg1, cipher_Checksum jarg1_, long jarg2);
  public final static native void set_cipher_Checksum_data(long jarg1, cipher_Checksum jarg1_, long jarg2);
  public final static native long get_cipher_Checksum_data(long jarg1, cipher_Checksum jarg1_);
  public final static native long new_cipher_Checksum();
  public final static native void delete_cipher_Checksum(long jarg1);
  public final static native long cipher_SecKeys_getAt(long jarg1, cipher_SecKeys jarg1_, int jarg2);
  public final static native int cipher_SecKeys_setAt(long jarg1, cipher_SecKeys jarg1_, int jarg2, long jarg3, cipher_SecKey jarg3_);
  public final static native int cipher_SecKeys_isEqual(long jarg1, cipher_SecKeys jarg1_, long jarg2, cipher_SecKeys jarg2_);
  public final static native void cipher_SecKeys_allocate(long jarg1, cipher_SecKeys jarg1_, int jarg2);
  public final static native void cipher_SecKeys_release(long jarg1, cipher_SecKeys jarg1_);
  public final static native void set_cipher_SecKeys_data(long jarg1, cipher_SecKeys jarg1_, long jarg2, cipher_SecKey jarg2_);
  public final static native long get_cipher_SecKeys_data(long jarg1, cipher_SecKeys jarg1_);
  public final static native void set_cipher_SecKeys_count(long jarg1, cipher_SecKeys jarg1_, int jarg2);
  public final static native int get_cipher_SecKeys_count(long jarg1, cipher_SecKeys jarg1_);
  public final static native long new_cipher_SecKeys();
  public final static native void delete_cipher_SecKeys(long jarg1);
  public final static native long cipher_PubKeys_getAt(long jarg1, cipher_PubKeys jarg1_, int jarg2);
  public final static native int cipher_PubKeys_setAt(long jarg1, cipher_PubKeys jarg1_, int jarg2, long jarg3, cipher_PubKey jarg3_);
  public final static native int cipher_PubKeys_isEqual(long jarg1, cipher_PubKeys jarg1_, long jarg2, cipher_PubKeys jarg2_);
  public final static native void cipher_PubKeys_allocate(long jarg1, cipher_PubKeys jarg1_, int jarg2);
  public final static native void cipher_PubKeys_release(long jarg1, cipher_PubKeys jarg1_);
  public final static native void set_cipher_PubKeys_data(long jarg1, cipher_PubKeys jarg1_, long jarg2, cipher_PubKey jarg2_);
  public final static native long get_cipher_PubKeys_data(long jarg1, cipher_PubKeys jarg1_);
  public final static native void set_cipher_PubKeys_count(long jarg1, cipher_PubKeys jarg1_, int jarg2);
  public final static native int get_cipher_PubKeys_count(long jarg1, cipher_PubKeys jarg1_);
  public final static native long new_cipher_PubKeys();
  public final static native void delete_cipher_PubKeys(long jarg1);
  public final static native long cipher_SHA256s_getAt(long jarg1, cipher_SHA256s jarg1_, int jarg2);
  public final static native int cipher_SHA256s_setAt(long jarg1, cipher_SHA256s jarg1_, int jarg2, long jarg3, cipher_SHA256 jarg3_);
  public final static native int cipher_SHA256s_isEqual(long jarg1, cipher_SHA256s jarg1_, long jarg2, cipher_SHA256s jarg2_);
  public final static native void cipher_SHA256s_allocate(long jarg1, cipher_SHA256s jarg1_, int jarg2);
  public final static native void cipher_SHA256s_release(long jarg1, cipher_SHA256s jarg1_);
  public final static native void set_cipher_SHA256s_data(long jarg1, cipher_SHA256s jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native long get_cipher_SHA256s_data(long jarg1, cipher_SHA256s jarg1_);
  public final static native void set_cipher_SHA256s_count(long jarg1, cipher_SHA256s jarg1_, int jarg2);
  public final static native int get_cipher_SHA256s_count(long jarg1, cipher_SHA256s jarg1_);
  public final static native long new_cipher_SHA256s();
  public final static native void delete_cipher_SHA256s(long jarg1);
  public final static native long coin_UxOutArray_getAt(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native int coin_UxOutArray_setAt(long jarg1, coin_UxOutArray jarg1_, int jarg2, long jarg3, coin__UxOut jarg3_);
  public final static native int coin_UxOutArray_isEqual(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin_UxOutArray jarg2_);
  public final static native void coin_UxOutArray_allocate(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native void coin_UxOutArray_append(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin__UxOut jarg2_);
  public final static native void coin_UxOutArray_release(long jarg1, coin_UxOutArray jarg1_);
  public final static native void set_coin_UxOutArray_data(long jarg1, coin_UxOutArray jarg1_, long jarg2, coin__UxOut jarg2_);
  public final static native long get_coin_UxOutArray_data(long jarg1, coin_UxOutArray jarg1_);
  public final static native void set_coin_UxOutArray_count(long jarg1, coin_UxOutArray jarg1_, int jarg2);
  public final static native int get_coin_UxOutArray_count(long jarg1, coin_UxOutArray jarg1_);
  public final static native long new_coin_UxOutArray();
  public final static native void delete_coin_UxOutArray(long jarg1);
  public final static native long cipher_Addresses_getAt(long jarg1, cipher_Addresses jarg1_, int jarg2);
  public final static native int cipher_Addresses_setAt(long jarg1, cipher_Addresses jarg1_, int jarg2, long jarg3, cipher_Addresses jarg3_);
  public final static native int cipher_Addresses_isEqual(long jarg1, cipher_Addresses jarg1_, long jarg2, cipher_Addresses jarg2_);
  public final static native void cipher_Addresses_allocate(long jarg1, cipher_Addresses jarg1_, int jarg2);
  public final static native void cipher_Addresses_release(long jarg1, cipher_Addresses jarg1_);
  public final static native void set_cipher_Addresses_data(long jarg1, cipher_Addresses jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long get_cipher_Addresses_data(long jarg1, cipher_Addresses jarg1_);
  public final static native void set_cipher_Addresses_count(long jarg1, cipher_Addresses jarg1_, int jarg2);
  public final static native int get_cipher_Addresses_count(long jarg1, cipher_Addresses jarg1_);
  public final static native long new_cipher_Addresses();
  public final static native void delete_cipher_Addresses(long jarg1);
  public final static native void set_FeeCalculator__callback(long jarg1, FeeCalculator_ jarg1_, long jarg2);
  public final static native long get_FeeCalculator__callback(long jarg1, FeeCalculator_ jarg1_);
  public final static native void set_FeeCalculator__context(long jarg1, FeeCalculator_ jarg1_, long jarg2);
  public final static native long get_FeeCalculator__context(long jarg1, FeeCalculator_ jarg1_);
  public final static native long new_FeeCalculator_();
  public final static native void delete_FeeCalculator_(long jarg1);
  public final static native void set__GoString__p(long jarg1, _GoString_ jarg1_, String jarg2);
  public final static native String get__GoString__p(long jarg1, _GoString_ jarg1_);
  public final static native void set__GoString__n(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long get__GoString__n(long jarg1, _GoString_ jarg1_);
  public final static native long new__GoString_();
  public final static native void delete__GoString_(long jarg1);
  public final static native void set_GoInterface_t(long jarg1, GoInterface jarg1_, long jarg2);
  public final static native long get_GoInterface_t(long jarg1, GoInterface jarg1_);
  public final static native void set_GoInterface_v(long jarg1, GoInterface jarg1_, long jarg2);
  public final static native long get_GoInterface_v(long jarg1, GoInterface jarg1_);
  public final static native long new_GoInterface();
  public final static native void delete_GoInterface(long jarg1);
  public final static native void set_GoSlice_data(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long get_GoSlice_data(long jarg1, GoSlice jarg1_);
  public final static native void set_GoSlice_len(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long get_GoSlice_len(long jarg1, GoSlice jarg1_);
  public final static native void set_GoSlice_cap(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long get_GoSlice_cap(long jarg1, GoSlice jarg1_);
  public final static native long new_GoSlice();
  public final static native void delete_GoSlice(long jarg1);
  public final static native long SKY_coin_NewBlock(long jarg1, java.math.BigInteger jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_coin_SignedBlock_VerifySignature(long jarg1, coin__SignedBlock jarg1_, long jarg2);
  public final static native long SKY_coin_NewGenesisBlock(long jarg1, cipher__Address jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_coin_Block_HashHeader(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_PreHashHeader(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_Time(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_Seq(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_HashBody(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_String(long jarg1, long jarg2);
  public final static native long SKY_coin_Block_GetTransaction(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_NewBlockHeader(long jarg1, coin__BlockHeader jarg1_, long jarg2, java.math.BigInteger jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, coin__BlockHeader jarg6_);
  public final static native long SKY_coin_BlockHeader_Hash(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long SKY_coin_BlockHeader_Bytes(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long SKY_coin_BlockHeader_String(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long SKY_coin_BlockBody_Hash(long jarg1, long jarg2);
  public final static native long SKY_coin_BlockBody_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_BlockBody_Bytes(long jarg1, long jarg2);
  public final static native long SKY_coin_CreateUnspents(long jarg1, coin__BlockHeader jarg1_, long jarg2, long jarg3);
  public final static native long SKY_coin_CreateUnspent(long jarg1, coin__BlockHeader jarg1_, long jarg2, long jarg3, long jarg4, coin__UxOut jarg4_);
  public final static native long SKY_coin_GetBlockObject(long jarg1, long jarg2);
  public final static native long SKY_coin_GetBlockBody(long jarg1, long jarg2);
  public final static native long SKY_coin_NewEmptyBlock(long jarg1, long jarg2);
  public final static native long SKY_bip39_NewDefaultMnemomic(long jarg1);
  public final static native long SKY_bip39_NewEntropy(long jarg1, long jarg2);
  public final static native long SKY_bip39_NewMnemonic(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_bip39_MnemonicToByteArray(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_bip39_IsMnemonicValid(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_api_NewClient(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_api_Client_CSRF(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Version(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Outputs(long jarg1, long jarg2);
  public final static native long SKY_api_Client_OutputsForAddresses(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_OutputsForHashes(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_CoinSupply(long jarg1, long jarg2);
  public final static native long SKY_api_Client_BlockByHash(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_BlockBySeq(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_api_Client_Blocks(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_LastBlocks(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_api_Client_BlockchainMetadata(long jarg1, long jarg2);
  public final static native long SKY_api_Client_BlockchainProgress(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Balance(long jarg1, long jarg2, GoSlice jarg2_, long jarg3, wallet__BalancePair jarg3_);
  public final static native long SKY_api_Client_UxOut(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_AddressUxOuts(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Wallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Wallets(long jarg1, long jarg2);
  public final static native long SKY_api_Client_CreateUnencryptedWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, long jarg5);
  public final static native long SKY_api_Client_CreateEncryptedWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, _GoString_ jarg4_, long jarg5, long jarg6);
  public final static native long SKY_api_Client_NewWalletAddress(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, long jarg4, _GoString_ jarg4_, long jarg5);
  public final static native long SKY_api_Client_WalletBalance(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, wallet__BalancePair jarg3_);
  public final static native long SKY_api_Client_Spend(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, java.math.BigInteger jarg4, long jarg5, _GoString_ jarg5_, long jarg6);
  public final static native long SKY_api_Client_CreateTransaction(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Client_UpdateWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_);
  public final static native long SKY_api_Client_WalletFolderName(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NewSeed(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Client_WalletSeed(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_api_Client_NetworkConnection(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_NetworkConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NetworkDefaultConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NetworkTrustedConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_NetworkExchangeableConnections(long jarg1, long jarg2);
  public final static native long SKY_api_Client_PendingTransactions(long jarg1, long jarg2);
  public final static native long SKY_api_Client_Transaction(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Transactions(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_ConfirmedTransactions(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_UnconfirmedTransactions(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_Client_InjectTransaction(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Client_ResendUnconfirmedTransactions(long jarg1, long jarg2);
  public final static native long SKY_api_Client_RawTransaction(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_AddressTransactions(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_api_Client_Richlist(long jarg1, long jarg2, api__RichlistParams jarg2_, long jarg3);
  public final static native long SKY_api_Client_AddressCount(long jarg1, long jarg2);
  public final static native long SKY_api_Client_UnloadWallet(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_api_Client_Health(long jarg1, long jarg2);
  public final static native long SKY_api_Client_EncryptWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_api_Client_DecryptWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_secp256k1go_XY_Print(long jarg1, secp256k1go__XY jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_XY_ParsePubkey(long jarg1, secp256k1go__XY jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_XY_Bytes(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XY_BytesUncompressed(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XY_SetXY(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3, secp256k1go__Field jarg3_);
  public final static native long SKY_secp256k1go_XY_IsValid(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XY_SetXYZ(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__XYZ jarg2_);
  public final static native long SKY_secp256k1go_XY_Neg(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__XY jarg2_);
  public final static native long SKY_secp256k1go_XY_SetXO(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_, short jarg3);
  public final static native long SKY_secp256k1go_XY_AddXY(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__XY jarg2_);
  public final static native long SKY_secp256k1go_XY_GetPublicKey(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long SKY_api_NewWalletResponse(long jarg1, long jarg2);
  public final static native long SKY_api_NewCreateTransactionResponse(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_NewCreatedTransaction(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_api_CreatedTransaction_ToTransaction(long jarg1, long jarg2);
  public final static native long SKY_api_NewCreatedTransactionOutput(long jarg1, coin__TransactionOutput jarg1_, long jarg2, long jarg3);
  public final static native long SKY_api_NewCreatedTransactionInput(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long SKY_wallet_NewError(long jarg1, GoInterface jarg1_);
  public final static native long SKY_wallet_NewWallet(long jarg1, _GoString_ jarg1_, long jarg2, long jarg3);
  public final static native long SKY_wallet_Wallet_Lock(long jarg1, long jarg2, GoSlice jarg2_, long jarg3, _GoString_ jarg3_);
  public final static native long SKY_wallet_Wallet_Unlock(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_wallet_Load(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_wallet_Wallet_Save(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_wallet_Wallet_Validate(long jarg1);
  public final static native long SKY_wallet_Wallet_Type(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_Version(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_Filename(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_Label(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_IsEncrypted(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_GenerateAddresses(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_wallet_Wallet_GetAddresses(long jarg1, long jarg2);
  public final static native long SKY_wallet_Wallet_GetEntry(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3, wallet__Entry jarg3_, long jarg4);
  public final static native long SKY_wallet_Wallet_AddEntry(long jarg1, long jarg2, wallet__Entry jarg2_);
  public final static native long SKY_wallet_DistributeSpendHours(java.math.BigInteger jarg1, java.math.BigInteger jarg2, short jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_wallet_DistributeCoinHoursProportional(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_wallet_NewUxBalances(java.math.BigInteger jarg1, long jarg2, long jarg3);
  public final static native long SKY_wallet_NewUxBalance(java.math.BigInteger jarg1, long jarg2, coin__UxOut jarg2_, long jarg3, wallet__UxBalance jarg3_);
  public final static native long SKY_wallet_ChooseSpendsMinimizeUxOuts(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_wallet_ChooseSpendsMaximizeUxOuts(long jarg1, GoSlice jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_cli_CheckWalletBalance(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_cli_GetBalanceOfAddresses(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_wallet_NewReadableEntry(long jarg1, _GoString_ jarg1_, long jarg2, wallet__Entry jarg2_, long jarg3);
  public final static native long SKY_wallet_LoadReadableWallet(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_wallet_ReadableWallet_Save(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_wallet_ReadableWallet_Load(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_wallet_ReadableWallet_Erase(long jarg1);
  public final static native long SKY_secp256k1go_DecompressPoint(long jarg1, GoSlice jarg1_, short jarg2, long jarg3, GoSlice jarg3_);
  public final static native long SKY_secp256k1go_RecoverPublicKey(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long SKY_secp256k1go_Multiply(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_BaseMultiply(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_BaseMultiplyAdd(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_GeneratePublicKey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_SeckeyIsValid(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_PubkeyIsValid(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_base58_String2Hex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_ToInt(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_ToHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_Base582Int(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base582Hex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Base58_BitHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_base58_Int2Base58(long jarg1, long jarg2);
  public final static native long SKY_base58_Hex2Base58(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_base58_Hex2Base58String(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_base58_Hex2Base58Str(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cli_GenerateWallet(long jarg1, _GoString_ jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_cli_MakeAlphanumericSeed(long jarg1);
  public final static native long SKY_webrpc_NewClient(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_webrpc_Client_CSRF(long jarg1, long jarg2);
  public final static native long SKY_webrpc_Client_InjectTransaction(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_webrpc_Client_GetStatus(long jarg1, long jarg2);
  public final static native long SKY_webrpc_Client_GetTransactionByID(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_webrpc_Client_GetAddressUxOuts(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_webrpc_Client_GetBlocksInRange(long jarg1, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native long SKY_webrpc_Client_GetBlocksBySeq(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_webrpc_Client_GetLastBlocks(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_iputil_LocalhostIP(long jarg1);
  public final static native long SKY_iputil_IsLocalhost(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_iputil_SplitAddr(long jarg1, _GoString_ jarg1_, long jarg2, long jarg3);
  public final static native long SKY_secp256k1_SumSHA256(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_RandByte(long jarg1, long jarg2);
  public final static native long SKY_cli_GenerateAddressesInFile(long jarg1, _GoString_ jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native long SKY_cli_FormatAddressesAsJSON(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cli_FormatAddressesAsJoinedArray(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cli_AddressesToStrings(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_coin_AddUint64(java.math.BigInteger jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_Uint64ToInt64(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_coin_Int64ToUint64(long jarg1, long jarg2);
  public final static native long SKY_cipher_RandByte(long jarg1, long jarg2);
  public final static native long SKY_cipher_NewPubKey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_PubKeyFromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_PubKeyFromSecKey(long jarg1, long jarg2);
  public final static native long SKY_cipher_PubKeyFromSig(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_PubKey_Verify(long jarg1);
  public final static native long SKY_cipher_PubKey_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_PubKeyRipemd160(long jarg1, long jarg2);
  public final static native long SKY_cipher_NewSecKey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SecKeyFromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_SecKey_Verify(long jarg1);
  public final static native long SKY_cipher_SecKey_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_ECDH(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_NewSig(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SigFromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_Sig_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_SignHash(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_ChkSig(long jarg1, cipher__Address jarg1_, long jarg2, long jarg3);
  public final static native long SKY_cipher_VerifySignedHash(long jarg1, long jarg2);
  public final static native long SKY_cipher_VerifySignature(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_GenerateKeyPair(long jarg1, long jarg2);
  public final static native long SKY_cipher_GenerateDeterministicKeyPair(long jarg1, GoSlice jarg1_, long jarg2, long jarg3);
  public final static native long SKY_cipher_DeterministicKeyPairIterator(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_cipher_GenerateDeterministicKeyPairs(long jarg1, GoSlice jarg1_, long jarg2, long jarg3);
  public final static native long SKY_cipher_GenerateDeterministicKeyPairsSeed(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_cipher_CheckSecKey(long jarg1);
  public final static native long SKY_cipher_CheckSecKeyHash(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Signature_Create(long jarg1);
  public final static native long SKY_secp256k1go_Signature_GetR(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Signature_GetS(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Signature_Print(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Signature_Verify(long jarg1, long jarg2, secp256k1go__XY jarg2_, long jarg3, long jarg4);
  public final static native long SKY_secp256k1go_Signature_Recover(long jarg1, long jarg2, secp256k1go__XY jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long SKY_secp256k1go_Signature_Sign(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long SKY_secp256k1go_Signature_ParseBytes(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Signature_Bytes(long jarg1, long jarg2);
  public final static native long SKY_cli_App_Run(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_cli_Config_GetCoin(long jarg1, long jarg2);
  public final static native long SKY_cli_Config_GetRPCAddress(long jarg1, long jarg2);
  public final static native long SKY_cli_RPCClientFromApp(long jarg1, long jarg2);
  public final static native long SKY_cli_Getenv(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cli_Setenv(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_poly1305_Verify(long jarg1, long jarg2, GoSlice jarg2_, long jarg3, long jarg4);
  public final static native long SKY_wallet_NewBalance(java.math.BigInteger jarg1, java.math.BigInteger jarg2, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_NewBalanceFromUxOut(java.math.BigInteger jarg1, long jarg2, coin__UxOut jarg2_, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_Balance_Add(long jarg1, wallet__Balance jarg1_, long jarg2, wallet__Balance jarg2_, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_Balance_Sub(long jarg1, wallet__Balance jarg1_, long jarg2, wallet__Balance jarg2_, long jarg3, wallet__Balance jarg3_);
  public final static native long SKY_wallet_Balance_Equals(long jarg1, wallet__Balance jarg1_, long jarg2, wallet__Balance jarg2_, long jarg3);
  public final static native long SKY_wallet_Balance_IsZero(long jarg1, wallet__Balance jarg1_, long jarg2);
  public final static native long SKY_httphelper_Address_UnmarshalJSON(long jarg1, httphelper__Address jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_httphelper_Address_MarshalJSON(long jarg1, httphelper__Address jarg1_, long jarg2);
  public final static native long SKY_httphelper_Coins_UnmarshalJSON(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_httphelper_Coins_MarshalJSON(long jarg1, long jarg2);
  public final static native long SKY_httphelper_Coins_Value(long jarg1, long jarg2);
  public final static native long SKY_httphelper_Hours_UnmarshalJSON(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_httphelper_Hours_MarshalJSON(long jarg1, long jarg2);
  public final static native long SKY_httphelper_Hours_Value(long jarg1, long jarg2);
  public final static native long SKY_wallet_Entry_Verify(long jarg1, wallet__Entry jarg1_);
  public final static native long SKY_wallet_Entry_VerifyPublic(long jarg1, wallet__Entry jarg1_);
  public final static native long SKY_secp256k1go_XYZ_Print(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_XYZ_SetXY(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XY jarg2_);
  public final static native long SKY_secp256k1go_XYZ_IsInfinity(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XYZ_IsValid(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_XYZ_Normalize(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native long SKY_secp256k1go_XYZ_Equals(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_XYZ_ECmult(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3, long jarg4);
  public final static native long SKY_secp256k1go_XYZ_Neg(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_);
  public final static native long SKY_secp256k1go_XYZ_Double(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_);
  public final static native long SKY_secp256k1go_XYZ_AddXY(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3, secp256k1go__XY jarg3_);
  public final static native long SKY_secp256k1go_XYZ_Add(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__XYZ jarg2_, long jarg3, secp256k1go__XYZ jarg3_);
  public final static native long SKY_secp256k1go_ECmultGen(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long SKY_droplet_FromString(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_droplet_ToString(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_wallet_CryptoTypeFromString(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native void SKY_handle_close(long jarg1);
  public final static native long SKY_handle_copy(long jarg1, long jarg2);
  public final static native long SKY_logging_EnableColors();
  public final static native long SKY_logging_DisableColors();
  public final static native long SKY_logging_Disable();
  public final static native long SKY_map_Get(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native short SKY_map_HasKey(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_map_Close(long jarg1);
  public final static native long SKY_cipher_DecodeBase58Address(long jarg1, _GoString_ jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_AddressFromBytes(long jarg1, GoSlice jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_AddressFromPubKey(long jarg1, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_AddressFromSecKey(long jarg1, long jarg2, cipher__Address jarg2_);
  public final static native long SKY_cipher_Address_Null(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_Bytes(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_Verify(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_String(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_cipher_Address_Checksum(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long SKY_JsonEncode_Handle(long jarg1, long jarg2);
  public final static native long SKY_Handle_Progress_GetCurrent(long jarg1, long jarg2);
  public final static native long SKY_Handle_Block_GetHeadSeq(long jarg1, long jarg2);
  public final static native long SKY_Handle_Block_GetHeadHash(long jarg1, long jarg2);
  public final static native long SKY_Handle_Block_GetPreviousBlockHash(long jarg1, long jarg2);
  public final static native long SKY_Handle_Blocks_GetAt(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_Handle_Blocks_GetCount(long jarg1, long jarg2);
  public final static native long SKY_Handle_Connections_GetCount(long jarg1, long jarg2);
  public final static native long SKY_Handle_Strings_GetCount(long jarg1, long jarg2);
  public final static native long SKY_Handle_Strings_Sort(long jarg1);
  public final static native long SKY_Handle_Strings_GetAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Handle_Client_GetWalletDir(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletFileName(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletLabel(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletFullPath(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Handle_GetWalletMeta(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetWalletEntriesCount(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_Client_GetWalletResponseEntriesCount(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletGetEntry(long jarg1, long jarg2, long jarg3, cipher__Address jarg3_, long jarg4);
  public final static native long SKY_api_Handle_WalletResponseGetEntry(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_api_Handle_WalletResponseIsEncrypted(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletResponseGetCryptoType(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletsResponseGetCount(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_WalletsResponseGetAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_api_Handle_GetWalletFolderAddress(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetWalletSeed(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetWalletLastSeed(long jarg1, long jarg2);
  public final static native long SKY_api_Handle_GetBuildInfoData(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_ripemd160_New(long jarg1);
  public final static native long SKY_ripemd160_Write(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_ripemd160_Sum(long jarg1, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_Number_Create(long jarg1);
  public final static native long SKY_secp256k1go_Number_Print(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Number_SetHex(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Number_IsOdd(long jarg1, long jarg2);
  public final static native long SKY_secp256k1go_Number_IsEqual(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_UxOut_Hash(long jarg1, coin__UxOut jarg1_, long jarg2);
  public final static native long SKY_coin_UxOut_SnapshotHash(long jarg1, coin__UxOut jarg1_, long jarg2);
  public final static native long SKY_coin_UxBody_Hash(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long SKY_coin_UxOut_CoinHours(long jarg1, coin__UxOut jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Hashes(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_HasDupes(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_Sort(long jarg1);
  public final static native long SKY_coin_UxArray_Len(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_Less(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_UxArray_Swap(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Coins(long jarg1, long jarg2);
  public final static native long SKY_coin_UxArray_CoinHours(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Sub(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_UxArray_Add(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_NewAddressUxOuts(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Keys(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Flatten(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Sub(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_Add(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_Get(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_HasKey(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_GetOutputLength(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_coin_AddressUxOuts_Length(long jarg1, long jarg2);
  public final static native long SKY_coin_AddressUxOuts_Set(long jarg1, long jarg2, cipher__Address jarg2_, long jarg3);
  public final static native long SKY_encrypt_ScryptChacha20poly1305_Encrypt(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_encrypt_ScryptChacha20poly1305_Decrypt(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_wallet_CreateOptionsHandle(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, short jarg4, long jarg5, _GoString_ jarg5_, long jarg6, _GoString_ jarg6_, java.math.BigInteger jarg7, long jarg8);
  public final static native long SKY_cli_AddPrivateKey(long jarg1, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_cli_AddPrivateKeyToFile(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_secp256k1_GenerateKeyPair(long jarg1, long jarg2);
  public final static native long SKY_secp256k1_PubkeyFromSeckey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_UncompressPubkey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_UncompressedPubkeyFromSeckey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_Secp256k1Hash(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_GenerateDeterministicKeyPair(long jarg1, GoSlice jarg1_, long jarg2, long jarg3);
  public final static native long SKY_secp256k1_DeterministicKeyPairIterator(long jarg1, GoSlice jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_secp256k1_Sign(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1_SignDeterministic(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_secp256k1_VerifySeckey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_VerifyPubkey(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_VerifySignatureValidity(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_secp256k1_VerifySignature(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_secp256k1_SignatureErrorString(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_secp256k1_RecoverPubkey(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_secp256k1_ECDH(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3);
  public final static native long SKY_apputil_CatchInterruptPanic();
  public final static native long SKY_apputil_CatchDebug();
  public final static native long SKY_apputil_PrintProgramStatus();
  public final static native long SKY_certutil_NewTLSCertPair(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3, GoSlice jarg3_, long jarg4, long jarg5);
  public final static native long SKY_fee_VerifyTransactionFee(long jarg1, java.math.BigInteger jarg2);
  public final static native long SKY_fee_VerifyTransactionFeeForHours(java.math.BigInteger jarg1, java.math.BigInteger jarg2);
  public final static native long SKY_fee_RequiredFee(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_fee_RemainingHours(java.math.BigInteger jarg1, long jarg2);
  public final static native long SKY_fee_TransactionFee(long jarg1, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native long SKY_cli_LoadConfig(long jarg1);
  public final static native long SKY_cli_Config_FullWalletPath(long jarg1, long jarg2);
  public final static native long SKY_cli_Config_FullDBPath(long jarg1, long jarg2);
  public final static native long SKY_cli_NewApp(long jarg1, long jarg2);
  public final static native long SKY_cli_RPCClientFromContext(long jarg1, long jarg2);
  public final static native long SKY_cli_ConfigFromContext(long jarg1, long jarg2);
  public final static native long SKY_cli_PasswordFromBytes_Password(long jarg1, long jarg2);
  public final static native long SKY_cli_PasswordFromTerm_Password(long jarg1);
  public final static native long SKY_cli_CreateRawTxFromWallet(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, GoSlice jarg4_, long jarg5, long jarg6);
  public final static native long SKY_cli_CreateRawTxFromAddress(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4, _GoString_ jarg4_, long jarg5, GoSlice jarg5_, long jarg6, long jarg7);
  public final static native long SKY_cli_CreateRawTx(long jarg1, long jarg2, long jarg3, GoSlice jarg3_, long jarg4, _GoString_ jarg4_, long jarg5, GoSlice jarg5_, long jarg6, GoSlice jarg6_, long jarg7);
  public final static native long SKY_cli_NewTransaction(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, GoSlice jarg3_, long jarg4);
  public final static native long SKY_file_InitDataDir(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_file_UserHome(long jarg1);
  public final static native long SKY_file_ResolveResourceDirectory(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_file_DetermineResourcePath(long jarg1, _GoString_ jarg1_, long jarg2, _GoString_ jarg2_, long jarg3, _GoString_ jarg3_, long jarg4);
  public final static native long SKY_cipher_DecodeBase58BitcoinAddress(long jarg1, _GoString_ jarg1_, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native void SKY_cipher_BitcoinAddressFromPubKey(long jarg1, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native long SKY_cipher_BitcoinAddressFromSecKey(long jarg1, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native void SKY_cipher_BitcoinWalletImportFormatFromSeckey(long jarg1, long jarg2);
  public final static native long SKY_cipher_BitcoinAddressFromBytes(long jarg1, GoSlice jarg1_, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native long SKY_cipher_SecKeyFromBitcoinWalletImportFormat(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native short SKY_cipher_BitcoinAddress_Null(long jarg1, cipher__BitcoinAddress jarg1_);
  public final static native void SKY_cipher_BitcoinAddress_Bytes(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long SKY_cipher_BitcoinAddress_Verify(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native void SKY_cipher_BitcoinAddress_String(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native void SKY_cipher_BitcoinAddress_Checksum(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long SKY_cli_GetWalletOutputsFromFile(long jarg1, long jarg2, _GoString_ jarg2_, long jarg3);
  public final static native long SKY_cli_GetWalletOutputs(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_testutil_MakeAddress(long jarg1, cipher__Address jarg1_);
  public final static native long SKY_secp256k1go_Field_String(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_Print(long jarg1, secp256k1go__Field jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Field_SetB32(long jarg1, secp256k1go__Field jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Field_SetBytes(long jarg1, secp256k1go__Field jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Field_SetHex(long jarg1, secp256k1go__Field jarg1_, long jarg2, _GoString_ jarg2_);
  public final static native long SKY_secp256k1go_Field_IsOdd(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_IsZero(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_SetInt(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_Normalize(long jarg1, secp256k1go__Field jarg1_);
  public final static native long SKY_secp256k1go_Field_GetB32(long jarg1, secp256k1go__Field jarg1_, long jarg2, GoSlice jarg2_);
  public final static native long SKY_secp256k1go_Field_Equals(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_Field_SetAdd(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_MulInt(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long SKY_secp256k1go_Field_Negate(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3);
  public final static native long SKY_secp256k1go_Field_Inv(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_Sqrt(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_InvVar(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_secp256k1go_Field_Mul(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_, long jarg3, secp256k1go__Field jarg3_);
  public final static native long SKY_secp256k1go_Field_Sqr(long jarg1, secp256k1go__Field jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long SKY_scrypt_Key(long jarg1, GoSlice jarg1_, long jarg2, GoSlice jarg2_, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native long SKY_cipher_Ripemd160_Set(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_cipher_HashRipemd160(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256_Set(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_cipher_SHA256_Hex(long jarg1, long jarg2);
  public final static native long SKY_cipher_SHA256_Xor(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_SumSHA256(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256FromHex(long jarg1, _GoString_ jarg1_, long jarg2);
  public final static native long SKY_cipher_DoubleSHA256(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_AddSHA256(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_cipher_Merkle(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_cipher_SHA256_Null(long jarg1, long jarg2);
  public final static native long SKY_coin_Create_Transaction(long jarg1);
  public final static native long SKY_coin_Transaction_Copy(long jarg1, long jarg2);
  public final static native long SKY_coin_GetTransactionObject(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_ResetInputs(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetInputsCount(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetInputAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_SetInputAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_GetOutputsCount(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetOutputAt(long jarg1, long jarg2, long jarg3, coin__TransactionOutput jarg3_);
  public final static native long SKY_coin_Transaction_SetOutputAt(long jarg1, long jarg2, long jarg3, coin__TransactionOutput jarg3_);
  public final static native long SKY_coin_Transaction_GetSignaturesCount(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_GetSignatureAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_SetSignatureAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_PushSignature(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_ResetOutputs(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_ResetSignatures(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_Verify(long jarg1);
  public final static native long SKY_coin_Transaction_VerifyInput(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_PushInput(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_TransactionOutput_UxID(long jarg1, coin__TransactionOutput jarg1_, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_PushOutput(long jarg1, long jarg2, cipher__Address jarg2_, java.math.BigInteger jarg3, java.math.BigInteger jarg4);
  public final static native long SKY_coin_Transaction_SignInputs(long jarg1, long jarg2, GoSlice jarg2_);
  public final static native long SKY_coin_Transaction_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_Hash(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_SizeHash(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transaction_TxID(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_TxIDHex(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_UpdateHeader(long jarg1);
  public final static native long SKY_coin_Transaction_HashInner(long jarg1, long jarg2);
  public final static native long SKY_coin_Transaction_Serialize(long jarg1, long jarg2);
  public final static native long SKY_coin_TransactionDeserialize(long jarg1, GoSlice jarg1_, long jarg2);
  public final static native long SKY_coin_Transaction_OutputHours(long jarg1, long jarg2);
  public final static native long SKY_coin_Create_Transactions(long jarg1);
  public final static native long SKY_coin_GetTransactionsObject(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Length(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Add(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Fees(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transactions_GetAt(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_Transactions_Hashes(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_Size(long jarg1, long jarg2);
  public final static native long SKY_coin_Transactions_TruncateBytesTo(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_SortTransactions(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_NewSortableTransactions(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_SortableTransactions_Sort(long jarg1);
  public final static native long SKY_coin_SortableTransactions_Len(long jarg1, long jarg2);
  public final static native long SKY_coin_SortableTransactions_Less(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SKY_coin_SortableTransactions_Swap(long jarg1, long jarg2, long jarg3);
  public final static native long SKY_coin_VerifyTransactionCoinsSpending(long jarg1, long jarg2);
  public final static native long SKY_coin_VerifyTransactionHoursSpending(java.math.BigInteger jarg1, long jarg2, long jarg3);
  public final static native void set_api__RichlistParams_N(long jarg1, api__RichlistParams jarg1_, long jarg2);
  public final static native long get_api__RichlistParams_N(long jarg1, api__RichlistParams jarg1_);
  public final static native void set_api__RichlistParams_IncludeDistribution(long jarg1, api__RichlistParams jarg1_, long jarg2);
  public final static native long get_api__RichlistParams_IncludeDistribution(long jarg1, api__RichlistParams jarg1_);
  public final static native long new_api__RichlistParams();
  public final static native void delete_api__RichlistParams(long jarg1);
  public final static native int cipher__Address_isEqual(long jarg1, cipher__Address jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native void set_cipher__Address_Version(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long get_cipher__Address_Version(long jarg1, cipher__Address jarg1_);
  public final static native void set_cipher__Address_Key(long jarg1, cipher__Address jarg1_, long jarg2);
  public final static native long get_cipher__Address_Key(long jarg1, cipher__Address jarg1_);
  public final static native long new_cipher__Address();
  public final static native void delete_cipher__Address(long jarg1);
  public final static native int cipher__BitcoinAddress_isEqual(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2, cipher__BitcoinAddress jarg2_);
  public final static native void set_cipher__BitcoinAddress_Version(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long get_cipher__BitcoinAddress_Version(long jarg1, cipher__BitcoinAddress jarg1_);
  public final static native void set_cipher__BitcoinAddress_Key(long jarg1, cipher__BitcoinAddress jarg1_, long jarg2);
  public final static native long get_cipher__BitcoinAddress_Key(long jarg1, cipher__BitcoinAddress jarg1_);
  public final static native long new_cipher__BitcoinAddress();
  public final static native void delete_cipher__BitcoinAddress(long jarg1);
  public final static native void set_encrypt__ScryptChacha20poly1305_N(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long get_encrypt__ScryptChacha20poly1305_N(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native void set_encrypt__ScryptChacha20poly1305_R(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long get_encrypt__ScryptChacha20poly1305_R(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native void set_encrypt__ScryptChacha20poly1305_P(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long get_encrypt__ScryptChacha20poly1305_P(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native void set_encrypt__ScryptChacha20poly1305_KeyLen(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_, long jarg2);
  public final static native long get_encrypt__ScryptChacha20poly1305_KeyLen(long jarg1, encrypt__ScryptChacha20poly1305 jarg1_);
  public final static native long new_encrypt__ScryptChacha20poly1305();
  public final static native void delete_encrypt__ScryptChacha20poly1305(long jarg1);
  public final static native void set_secp256k1go__Field_n(long jarg1, secp256k1go__Field jarg1_, long jarg2);
  public final static native long get_secp256k1go__Field_n(long jarg1, secp256k1go__Field jarg1_);
  public final static native long new_secp256k1go__Field();
  public final static native void delete_secp256k1go__Field(long jarg1);
  public final static native void set_secp256k1go__XY_X(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long get_secp256k1go__XY_X(long jarg1, secp256k1go__XY jarg1_);
  public final static native void set_secp256k1go__XY_Y(long jarg1, secp256k1go__XY jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long get_secp256k1go__XY_Y(long jarg1, secp256k1go__XY jarg1_);
  public final static native void set_secp256k1go__XY_Infinity(long jarg1, secp256k1go__XY jarg1_, long jarg2);
  public final static native long get_secp256k1go__XY_Infinity(long jarg1, secp256k1go__XY jarg1_);
  public final static native long new_secp256k1go__XY();
  public final static native void delete_secp256k1go__XY(long jarg1);
  public final static native void set_secp256k1go__XYZ_X(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long get_secp256k1go__XYZ_X(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native void set_secp256k1go__XYZ_Y(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long get_secp256k1go__XYZ_Y(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native void set_secp256k1go__XYZ_Z(long jarg1, secp256k1go__XYZ jarg1_, long jarg2, secp256k1go__Field jarg2_);
  public final static native long get_secp256k1go__XYZ_Z(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native void set_secp256k1go__XYZ_Infinity(long jarg1, secp256k1go__XYZ jarg1_, long jarg2);
  public final static native long get_secp256k1go__XYZ_Infinity(long jarg1, secp256k1go__XYZ jarg1_);
  public final static native long new_secp256k1go__XYZ();
  public final static native void delete_secp256k1go__XYZ(long jarg1);
  public final static native void set_cli__SendAmount_Addr(long jarg1, cli__SendAmount jarg1_, long jarg2);
  public final static native long get_cli__SendAmount_Addr(long jarg1, cli__SendAmount jarg1_);
  public final static native void set_cli__SendAmount_Coins(long jarg1, cli__SendAmount jarg1_, long jarg2);
  public final static native long get_cli__SendAmount_Coins(long jarg1, cli__SendAmount jarg1_);
  public final static native long new_cli__SendAmount();
  public final static native void delete_cli__SendAmount(long jarg1);
  public final static native int coin__Transaction_isEqual(long jarg1, coin__Transaction jarg1_, long jarg2, coin__Transaction jarg2_);
  public final static native long coin__Transaction_getInnerHash(long jarg1, coin__Transaction jarg1_);
  public final static native void set_coin__Transaction_Length(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long get_coin__Transaction_Length(long jarg1, coin__Transaction jarg1_);
  public final static native void set_coin__Transaction_Type(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long get_coin__Transaction_Type(long jarg1, coin__Transaction jarg1_);
  public final static native void set_coin__Transaction_InnerHash(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long get_coin__Transaction_InnerHash(long jarg1, coin__Transaction jarg1_);
  public final static native void set_coin__Transaction_Sigs(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long get_coin__Transaction_Sigs(long jarg1, coin__Transaction jarg1_);
  public final static native void set_coin__Transaction_In(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long get_coin__Transaction_In(long jarg1, coin__Transaction jarg1_);
  public final static native void set_coin__Transaction_Out(long jarg1, coin__Transaction jarg1_, long jarg2);
  public final static native long get_coin__Transaction_Out(long jarg1, coin__Transaction jarg1_);
  public final static native long new_coin__Transaction();
  public final static native void delete_coin__Transaction(long jarg1);
  public final static native int coin__TransactionOutput_isEqual(long jarg1, coin__TransactionOutput jarg1_, long jarg2, coin__TransactionOutput jarg2_);
  public final static native void set_coin__TransactionOutput_Address(long jarg1, coin__TransactionOutput jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long get_coin__TransactionOutput_Address(long jarg1, coin__TransactionOutput jarg1_);
  public final static native void set_coin__TransactionOutput_Coins(long jarg1, coin__TransactionOutput jarg1_, long jarg2);
  public final static native long get_coin__TransactionOutput_Coins(long jarg1, coin__TransactionOutput jarg1_);
  public final static native void set_coin__TransactionOutput_Hours(long jarg1, coin__TransactionOutput jarg1_, long jarg2);
  public final static native long get_coin__TransactionOutput_Hours(long jarg1, coin__TransactionOutput jarg1_);
  public final static native long new_coin__TransactionOutput();
  public final static native void delete_coin__TransactionOutput(long jarg1);
  public final static native int coin__BlockHeader_isEqual(long jarg1, coin__BlockHeader jarg1_, long jarg2, coin__BlockHeader jarg2_);
  public final static native void set_coin__BlockHeader_Version(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_Version(long jarg1, coin__BlockHeader jarg1_);
  public final static native void set_coin__BlockHeader_Time(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_Time(long jarg1, coin__BlockHeader jarg1_);
  public final static native void set_coin__BlockHeader_BkSeq(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_BkSeq(long jarg1, coin__BlockHeader jarg1_);
  public final static native void set_coin__BlockHeader_Fee(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_Fee(long jarg1, coin__BlockHeader jarg1_);
  public final static native void set_coin__BlockHeader_PrevHash(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_PrevHash(long jarg1, coin__BlockHeader jarg1_);
  public final static native void set_coin__BlockHeader_BodyHash(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_BodyHash(long jarg1, coin__BlockHeader jarg1_);
  public final static native void set_coin__BlockHeader_UxHash(long jarg1, coin__BlockHeader jarg1_, long jarg2);
  public final static native long get_coin__BlockHeader_UxHash(long jarg1, coin__BlockHeader jarg1_);
  public final static native long new_coin__BlockHeader();
  public final static native void delete_coin__BlockHeader(long jarg1);
  public final static native int coin__BlockBody_isEqual(long jarg1, coin__BlockBody jarg1_, long jarg2, coin__BlockBody jarg2_);
  public final static native void set_coin__BlockBody_Transactions(long jarg1, coin__BlockBody jarg1_, long jarg2);
  public final static native long get_coin__BlockBody_Transactions(long jarg1, coin__BlockBody jarg1_);
  public final static native long new_coin__BlockBody();
  public final static native void delete_coin__BlockBody(long jarg1);
  public final static native void set_coin__Block_Head(long jarg1, coin__Block jarg1_, long jarg2, coin__BlockHeader jarg2_);
  public final static native long get_coin__Block_Head(long jarg1, coin__Block jarg1_);
  public final static native void set_coin__Block_Body(long jarg1, coin__Block jarg1_, long jarg2, coin__BlockBody jarg2_);
  public final static native long get_coin__Block_Body(long jarg1, coin__Block jarg1_);
  public final static native long new_coin__Block();
  public final static native void delete_coin__Block(long jarg1);
  public final static native void set_coin__SignedBlock__unnamed(long jarg1, coin__SignedBlock jarg1_, long jarg2, coin__Block jarg2_);
  public final static native long get_coin__SignedBlock__unnamed(long jarg1, coin__SignedBlock jarg1_);
  public final static native void set_coin__SignedBlock_Sig(long jarg1, coin__SignedBlock jarg1_, long jarg2);
  public final static native long get_coin__SignedBlock_Sig(long jarg1, coin__SignedBlock jarg1_);
  public final static native long new_coin__SignedBlock();
  public final static native void delete_coin__SignedBlock(long jarg1);
  public final static native void set_coin__UxHead_Time(long jarg1, coin__UxHead jarg1_, long jarg2);
  public final static native long get_coin__UxHead_Time(long jarg1, coin__UxHead jarg1_);
  public final static native void set_coin__UxHead_BkSeq(long jarg1, coin__UxHead jarg1_, long jarg2);
  public final static native long get_coin__UxHead_BkSeq(long jarg1, coin__UxHead jarg1_);
  public final static native long new_coin__UxHead();
  public final static native void delete_coin__UxHead(long jarg1);
  public final static native void coin__UxBody_SetSrcTransaction(long jarg1, coin__UxBody jarg1_, long jarg2, cipher_SHA256 jarg2_);
  public final static native void set_coin__UxBody_SrcTransaction(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long get_coin__UxBody_SrcTransaction(long jarg1, coin__UxBody jarg1_);
  public final static native void set_coin__UxBody_Address(long jarg1, coin__UxBody jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long get_coin__UxBody_Address(long jarg1, coin__UxBody jarg1_);
  public final static native void set_coin__UxBody_Coins(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long get_coin__UxBody_Coins(long jarg1, coin__UxBody jarg1_);
  public final static native void set_coin__UxBody_Hours(long jarg1, coin__UxBody jarg1_, long jarg2);
  public final static native long get_coin__UxBody_Hours(long jarg1, coin__UxBody jarg1_);
  public final static native long new_coin__UxBody();
  public final static native void delete_coin__UxBody(long jarg1);
  public final static native int coin__UxOut_isEqual(long jarg1, coin__UxOut jarg1_, long jarg2, coin__UxOut jarg2_);
  public final static native void set_coin__UxOut_Head(long jarg1, coin__UxOut jarg1_, long jarg2, coin__UxHead jarg2_);
  public final static native long get_coin__UxOut_Head(long jarg1, coin__UxOut jarg1_);
  public final static native void set_coin__UxOut_Body(long jarg1, coin__UxOut jarg1_, long jarg2, coin__UxBody jarg2_);
  public final static native long get_coin__UxOut_Body(long jarg1, coin__UxOut jarg1_);
  public final static native long new_coin__UxOut();
  public final static native void delete_coin__UxOut(long jarg1);
  public final static native void set_httphelper__Address__unnamed(long jarg1, httphelper__Address jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long get_httphelper__Address__unnamed(long jarg1, httphelper__Address jarg1_);
  public final static native long new_httphelper__Address();
  public final static native void delete_httphelper__Address(long jarg1);
  public final static native void set_wallet__Balance_Coins(long jarg1, wallet__Balance jarg1_, long jarg2);
  public final static native long get_wallet__Balance_Coins(long jarg1, wallet__Balance jarg1_);
  public final static native void set_wallet__Balance_Hours(long jarg1, wallet__Balance jarg1_, long jarg2);
  public final static native long get_wallet__Balance_Hours(long jarg1, wallet__Balance jarg1_);
  public final static native long new_wallet__Balance();
  public final static native void delete_wallet__Balance(long jarg1);
  public final static native void set_wallet__BalancePair_Confirmed(long jarg1, wallet__BalancePair jarg1_, long jarg2, wallet__Balance jarg2_);
  public final static native long get_wallet__BalancePair_Confirmed(long jarg1, wallet__BalancePair jarg1_);
  public final static native void set_wallet__BalancePair_Predicted(long jarg1, wallet__BalancePair jarg1_, long jarg2, wallet__Balance jarg2_);
  public final static native long get_wallet__BalancePair_Predicted(long jarg1, wallet__BalancePair jarg1_);
  public final static native long new_wallet__BalancePair();
  public final static native void delete_wallet__BalancePair(long jarg1);
  public final static native void set_wallet__Entry_Address(long jarg1, wallet__Entry jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long get_wallet__Entry_Address(long jarg1, wallet__Entry jarg1_);
  public final static native void set_wallet__Entry_Public(long jarg1, wallet__Entry jarg1_, long jarg2);
  public final static native long get_wallet__Entry_Public(long jarg1, wallet__Entry jarg1_);
  public final static native void set_wallet__Entry_Secret(long jarg1, wallet__Entry jarg1_, long jarg2);
  public final static native long get_wallet__Entry_Secret(long jarg1, wallet__Entry jarg1_);
  public final static native long new_wallet__Entry();
  public final static native void delete_wallet__Entry(long jarg1);
  public final static native void set_wallet__Note_TxID(long jarg1, wallet__Note jarg1_, long jarg2);
  public final static native long get_wallet__Note_TxID(long jarg1, wallet__Note jarg1_);
  public final static native void set_wallet__Note_Value(long jarg1, wallet__Note jarg1_, long jarg2);
  public final static native long get_wallet__Note_Value(long jarg1, wallet__Note jarg1_);
  public final static native long new_wallet__Note();
  public final static native void delete_wallet__Note(long jarg1);
  public final static native void set_wallet__ReadableNote_TransactionID(long jarg1, wallet__ReadableNote jarg1_, long jarg2);
  public final static native long get_wallet__ReadableNote_TransactionID(long jarg1, wallet__ReadableNote jarg1_);
  public final static native void set_wallet__ReadableNote_ActualNote(long jarg1, wallet__ReadableNote jarg1_, long jarg2);
  public final static native long get_wallet__ReadableNote_ActualNote(long jarg1, wallet__ReadableNote jarg1_);
  public final static native long new_wallet__ReadableNote();
  public final static native void delete_wallet__ReadableNote(long jarg1);
  public final static native void set_wallet__UxBalance_Hash(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long get_wallet__UxBalance_Hash(long jarg1, wallet__UxBalance jarg1_);
  public final static native void set_wallet__UxBalance_BkSeq(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long get_wallet__UxBalance_BkSeq(long jarg1, wallet__UxBalance jarg1_);
  public final static native void set_wallet__UxBalance_Address(long jarg1, wallet__UxBalance jarg1_, long jarg2, cipher__Address jarg2_);
  public final static native long get_wallet__UxBalance_Address(long jarg1, wallet__UxBalance jarg1_);
  public final static native void set_wallet__UxBalance_Coins(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long get_wallet__UxBalance_Coins(long jarg1, wallet__UxBalance jarg1_);
  public final static native void set_wallet__UxBalance_Hours(long jarg1, wallet__UxBalance jarg1_, long jarg2);
  public final static native long get_wallet__UxBalance_Hours(long jarg1, wallet__UxBalance jarg1_);
  public final static native long new_wallet__UxBalance();
  public final static native void delete_wallet__UxBalance(long jarg1);
  public final static native int get_SKY_OK();
  public final static native int get_SKY_ERROR();
  public final static native int get_SKY_BAD_HANDLE();
  public final static native int get_SKY_INVALID_TIMESTRING();
  public final static native int get_SKY_PKG_API();
  public final static native int get_SKY_PKG_CIPHER();
  public final static native int get_SKY_PKG_CLI();
  public final static native int get_SKY_PKG_COIN();
  public final static native int get_SKY_PKG_CONSENSUS();
  public final static native int get_SKY_PKG_DAEMON();
  public final static native int get_SKY_PKG_GUI();
  public final static native int get_SKY_PKG_SKYCOIN();
  public final static native int get_SKY_PKG_UTIL();
  public final static native int get_SKY_PKG_VISOR();
  public final static native int get_SKY_PKG_WALLET();
  public final static native int get_SKY_PKG_LIBCGO();
  public final static native int get_SKY_ErrAddressInvalidLength();
  public final static native int get_SKY_ErrAddressInvalidChecksum();
  public final static native int get_SKY_ErrAddressInvalidVersion();
  public final static native int get_SKY_ErrAddressInvalidPubKey();
  public final static native int get_SKY_ErrAddressInvalidFirstByte();
  public final static native int get_SKY_ErrAddressInvalidLastByte();
  public final static native int get_SKY_ErrBufferUnderflow();
  public final static native int get_SKY_ErrInvalidOmitEmpty();
  public final static native int get_SKY_ErrInvalidLengthPubKey();
  public final static native int get_SKY_ErrPubKeyFromNullSecKey();
  public final static native int get_SKY_ErrPubKeyFromBadSecKey();
  public final static native int get_SKY_ErrInvalidLengthSecKey();
  public final static native int get_SKY_ErrECHDInvalidPubKey();
  public final static native int get_SKY_ErrECHDInvalidSecKey();
  public final static native int get_SKY_ErrInvalidLengthSig();
  public final static native int get_SKY_ErrInvalidLengthRipemd160();
  public final static native int get_SKY_ErrInvalidLengthSHA256();
  public final static native int get_SKY_ErrInvalidBase58Char();
  public final static native int get_SKY_ErrInvalidBase58String();
  public final static native int get_SKY_ErrInvalidBase58Length();
  public final static native int get_SKY_ErrInvalidHexLength();
  public final static native int get_SKY_ErrInvalidBytesLength();
  public final static native int get_SKY_ErrInvalidPubKey();
  public final static native int get_SKY_ErrInvalidSecKey();
  public final static native int get_SKY_ErrInvalidSigForPubKey();
  public final static native int get_SKY_ErrInvalidSecKeyHex();
  public final static native int get_SKY_ErrInvalidAddressForSig();
  public final static native int get_SKY_ErrInvalidHashForSig();
  public final static native int get_SKY_ErrPubKeyRecoverMismatch();
  public final static native int get_SKY_ErrInvalidSigInvalidPubKey();
  public final static native int get_SKY_ErrInvalidSigValidity();
  public final static native int get_SKY_ErrInvalidSigForMessage();
  public final static native int get_SKY_ErrInvalidSecKyVerification();
  public final static native int get_SKY_ErrNullPubKeyFromSecKey();
  public final static native int get_SKY_ErrInvalidDerivedPubKeyFromSecKey();
  public final static native int get_SKY_ErrInvalidPubKeyFromHash();
  public final static native int get_SKY_ErrPubKeyFromSecKeyMismatch();
  public final static native int get_SKY_ErrInvalidLength();
  public final static native int get_SKY_ErrBitcoinWIFInvalidFirstByte();
  public final static native int get_SKY_ErrBitcoinWIFInvalidSuffix();
  public final static native int get_SKY_ErrBitcoinWIFInvalidChecksum();
  public final static native int get_SKY_ErrEmptySeed();
  public final static native int get_SKY_ErrInvalidSig();
  public final static native int get_SKY_ErrSHA256orMissingPassword();
  public final static native int get_SKY_ErrLenghtDataOverflowMaxUint32();
  public final static native int get_SKY_ErrInvalidChecksumLength();
  public final static native int get_SKY_ErrInvalidDataChecksumNotMatched();
  public final static native int get_SKY_ErrInvalidNonceLength();
  public final static native int get_SKY_ErrInvalidBlockSizeMultiple32Bytes();
  public final static native int get_SKY_ErrReadDataHashFailedLength();
  public final static native int get_SKY_ErrSHA256orInvalidPassword();
  public final static native int get_SKY_ErrReadDataLengthFailed();
  public final static native int get_SKY_ErrInvalidDataLength();
  public final static native int get_SKY_ErrTemporaryInsufficientBalance();
  public final static native int get_SKY_ErrAddress();
  public final static native int get_SKY_ErrWalletName();
  public final static native int get_SKY_ErrJSONMarshal();
  public final static native int get_SKY_WalletLoadError();
  public final static native int get_SKY_WalletSaveError();
  public final static native int get_SKY_ErrAddEarnedCoinHoursAdditionOverflow();
  public final static native int get_SKY_ErrUint64MultOverflow();
  public final static native int get_SKY_ErrUint64AddOverflow();
  public final static native int get_SKY_ErrUint32AddOverflow();
  public final static native int get_SKY_ErrUint64OverflowsInt64();
  public final static native int get_SKY_ErrInt64UnderflowsUint64();
  public final static native int get_SKY_ErrPeerlistFull();
  public final static native int get_SKY_ErrInvalidAddress();
  public final static native int get_SKY_ErrNoLocalhost();
  public final static native int get_SKY_ErrNotExternalIP();
  public final static native int get_SKY_ErrPortTooLow();
  public final static native int get_SKY_ErrBlacklistedAddress();
  public final static native int get_SKY_ErrDisconnectReadFailed();
  public final static native int get_SKY_ErrDisconnectWriteFailed();
  public final static native int get_SKY_ErrDisconnectSetReadDeadlineFailed();
  public final static native int get_SKY_ErrDisconnectInvalidMessageLength();
  public final static native int get_SKY_ErrDisconnectMalformedMessage();
  public final static native int get_SKY_ErrDisconnectUnknownMessage();
  public final static native int get_SKY_ErrDisconnectUnexpectedError();
  public final static native int get_SKY_ErrConnectionPoolClosed();
  public final static native int get_SKY_ErrWriteQueueFull();
  public final static native int get_SKY_ErrNoReachableConnections();
  public final static native int get_SKY_ErrMaxDefaultConnectionsReached();
  public final static native int get_SKY_ErrDisconnectInvalidVersion();
  public final static native int get_SKY_ErrDisconnectIntroductionTimeout();
  public final static native int get_SKY_ErrDisconnectVersionSendFailed();
  public final static native int get_SKY_ErrDisconnectIsBlacklisted();
  public final static native int get_SKY_ErrDisconnectSelf();
  public final static native int get_SKY_ErrDisconnectConnectedTwice();
  public final static native int get_SKY_ErrDisconnectIdle();
  public final static native int get_SKY_ErrDisconnectNoIntroduction();
  public final static native int get_SKY_ErrDisconnectIPLimitReached();
  public final static native int get_SKY_ErrDisconnectOtherError();
  public final static native int get_SKY_ErrDisconnectMaxDefaultConnectionReached();
  public final static native int get_SKY_ErrDisconnectMaxOutgoingConnectionsReached();
  public final static native int get_SKY_ConnectionError();
  public final static native int get_SKY_ErrTxnNoFee();
  public final static native int get_SKY_ErrTxnInsufficientFee();
  public final static native int get_SKY_ErrTxnInsufficientCoinHours();
  public final static native int get_SKY_ErrNegativeValue();
  public final static native int get_SKY_ErrTooManyDecimals();
  public final static native int get_SKY_ErrTooLarge();
  public final static native int get_SKY_ErrEmptyDirectoryName();
  public final static native int get_SKY_ErrDotDirectoryName();
  public final static native int get_SKY_ErrHistoryDBCorrupted();
  public final static native int get_SKY_ErrUxOutNotExist();
  public final static native int get_SKY_ErrNoHeadBlock();
  public final static native int get_SKY_ErrMissingSignature();
  public final static native int get_SKY_ErrUnspentNotExist();
  public final static native int get_SKY_ErrVerifyStopped();
  public final static native int get_SKY_ErrCreateBucketFailed();
  public final static native int get_SKY_ErrBucketNotExist();
  public final static native int get_SKY_ErrTxnViolatesHardConstraint();
  public final static native int get_SKY_ErrTxnViolatesSoftConstraint();
  public final static native int get_SKY_ErrTxnViolatesUserConstraint();
  public final static native int get_SKY_ErrInsufficientBalance();
  public final static native int get_SKY_ErrInsufficientHours();
  public final static native int get_SKY_ErrZeroSpend();
  public final static native int get_SKY_ErrSpendingUnconfirmed();
  public final static native int get_SKY_ErrInvalidEncryptedField();
  public final static native int get_SKY_ErrWalletEncrypted();
  public final static native int get_SKY_ErrWalletNotEncrypted();
  public final static native int get_SKY_ErrMissingPassword();
  public final static native int get_SKY_ErrMissingEncrypt();
  public final static native int get_SKY_ErrInvalidPassword();
  public final static native int get_SKY_ErrMissingSeed();
  public final static native int get_SKY_ErrMissingAuthenticated();
  public final static native int get_SKY_ErrWrongCryptoType();
  public final static native int get_SKY_ErrWalletNotExist();
  public final static native int get_SKY_ErrSeedUsed();
  public final static native int get_SKY_ErrWalletAPIDisabled();
  public final static native int get_SKY_ErrSeedAPIDisabled();
  public final static native int get_SKY_ErrWalletNameConflict();
  public final static native int get_SKY_ErrInvalidHoursSelectionMode();
  public final static native int get_SKY_ErrInvalidHoursSelectionType();
  public final static native int get_SKY_ErrUnknownAddress();
  public final static native int get_SKY_ErrUnknownUxOut();
  public final static native int get_SKY_ErrNoUnspents();
  public final static native int get_SKY_ErrNullChangeAddress();
  public final static native int get_SKY_ErrMissingTo();
  public final static native int get_SKY_ErrZeroCoinsTo();
  public final static native int get_SKY_ErrNullAddressTo();
  public final static native int get_SKY_ErrDuplicateTo();
  public final static native int get_SKY_ErrMissingWalletID();
  public final static native int get_SKY_ErrIncludesNullAddress();
  public final static native int get_SKY_ErrDuplicateAddresses();
  public final static native int get_SKY_ErrZeroToHoursAuto();
  public final static native int get_SKY_ErrMissingModeAuto();
  public final static native int get_SKY_ErrInvalidHoursSelMode();
  public final static native int get_SKY_ErrInvalidModeManual();
  public final static native int get_SKY_ErrInvalidHoursSelType();
  public final static native int get_SKY_ErrMissingShareFactor();
  public final static native int get_SKY_ErrInvalidShareFactor();
  public final static native int get_SKY_ErrShareFactorOutOfRange();
  public final static native int get_SKY_ErrWalletConstraint();
  public final static native int get_SKY_ErrDuplicateUxOuts();
  public final static native int get_SKY_ErrUnknownWalletID();
  public final static native int get_SKY_ErrVerifySignatureInvalidInputsNils();
  public final static native int get_SKY_ErrVerifySignatureInvalidSigLength();
  public final static native int get_SKY_ErrVerifySignatureInvalidPubkeysLength();
}
